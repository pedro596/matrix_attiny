
obj/main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000904  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000022  00800060  00000904  00000998  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000003a  00800082  00800082  000009ba  2**0
                  ALLOC
  3 .stab         00002da8  00000000  00000000  000009bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001ac5  00000000  00000000  00003764  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00005229  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000020  00000000  00000000  00005240  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000005b  00000000  00000000  00005260  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000014  00000000  00000000  000052bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000059  00000000  00000000  000052cf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
   6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	16 c1       	rjmp	.+556    	; 0x242 <__vector_10>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_copy_data>:
  2a:	10 e0       	ldi	r17, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	e4 e0       	ldi	r30, 0x04	; 4
  32:	f9 e0       	ldi	r31, 0x09	; 9
  34:	02 c0       	rjmp	.+4      	; 0x3a <__do_copy_data+0x10>
  36:	05 90       	lpm	r0, Z+
  38:	0d 92       	st	X+, r0
  3a:	a2 38       	cpi	r26, 0x82	; 130
  3c:	b1 07       	cpc	r27, r17
  3e:	d9 f7       	brne	.-10     	; 0x36 <__do_copy_data+0xc>

00000040 <__do_clear_bss>:
  40:	10 e0       	ldi	r17, 0x00	; 0
  42:	a2 e8       	ldi	r26, 0x82	; 130
  44:	b0 e0       	ldi	r27, 0x00	; 0
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	ac 3b       	cpi	r26, 0xBC	; 188
  4c:	b1 07       	cpc	r27, r17
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	93 d0       	rcall	.+294    	; 0x178 <main>
  52:	56 c4       	rjmp	.+2220   	; 0x900 <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <TxTimedByte>:
.global TxTimedByte
; transmit byte in r24 with bit delay in r22 - 15 instructions
; calling code must set Tx line to idle state (high) or 1st byte may be lost
; i.e. PORTB |= (1<<UART_Tx)
TxTimedByte:
	cli
  56:	f8 94       	cli
        sbi UART_Port-1, UART_Tx        ; set Tx line to output
  58:	b9 9a       	sbi	0x17, 1	; 23
        cbi UART_Port, UART_Tx          ; start bit
  5a:	c1 98       	cbi	0x18, 1	; 24
	in r0, UART_Port
  5c:	08 b2       	in	r0, 0x18	; 24
	ldi r25, 3                      ; stop bit + idle state
  5e:	93 e0       	ldi	r25, 0x03	; 3

00000060 <TxLoop>:
TxLoop:
        ; 8 cycle loop + delay - total = 7 + 3*r22
	mov delayCount, r22
  60:	26 2f       	mov	r18, r22

00000062 <TxDelay>:
TxDelay:
; delay (3 cycle * delayCount) -1
        dec delayCount
  62:	2a 95       	dec	r18
        brne TxDelay
  64:	f1 f7       	brne	.-4      	; 0x62 <TxDelay>
	bst r24, 0			; store lsb in T
  66:	80 fb       	bst	r24, 0
	bld r0, UART_Tx
  68:	01 f8       	bld	r0, 1
	lsr r25
  6a:	96 95       	lsr	r25
	ror r24
  6c:	87 95       	ror	r24
	out UART_Port, r0
  6e:	08 ba       	out	0x18, r0	; 24
        brne TxLoop
  70:	b9 f7       	brne	.-18     	; 0x60 <TxLoop>
	reti				; return and enable interrupts
  72:	18 95       	reti

00000074 <RxTimedByte>:


.global RxTimedByte
; receive byte into r24 with bit delay in r22 & R24 - 16 instructions
RxTimedByte:
        cbi UART_Port-1, UART_Rx  	; set Rx line to input
  74:	b9 98       	cbi	0x17, 1	; 23
#ifdef RX_PULLUP
        sbi UART_Port, UART_Rx  	; enable pullup
#endif
	mov delayCount, r24		; 1.5 bit delay
  76:	28 2f       	mov	r18, r24
	ldi r24, 0x80 			; bit shift counter
  78:	80 e8       	ldi	r24, 0x80	; 128

0000007a <WaitStart>:
WaitStart:
	sbic UART_Port-2, UART_Rx 	; wait for start edge
  7a:	b1 99       	sbic	0x16, 1	; 22
	rjmp WaitStart
  7c:	fe cf       	rjmp	.-4      	; 0x7a <WaitStart>
	cli
  7e:	f8 94       	cli

00000080 <RxBit>:
RxBit:
        ; 6 cycle loop + delay - total = 5 + 3*r22
; delay (3 cycle * delayCount) -1 and clear carry with subi
        subi delayCount, 1
  80:	21 50       	subi	r18, 0x01	; 1
        brne RxBit
  82:	f1 f7       	brne	.-4      	; 0x80 <RxBit>
	mov delayCount, r22
  84:	26 2f       	mov	r18, r22
	sbic UART_Port-2, UART_Rx	; check UART PIN
  86:	b1 99       	sbic	0x16, 1	; 22
	sec
  88:	08 94       	sec
	ror r24
  8a:	87 95       	ror	r24
	brcc RxBit
  8c:	c8 f7       	brcc	.-14     	; 0x80 <RxBit>

0000008e <StopBit>:
StopBit:
        dec delayCount
  8e:	2a 95       	dec	r18
        brne StopBit
  90:	f1 f7       	brne	.-4      	; 0x8e <StopBit>
	reti				; return and enable interrupts
  92:	18 95       	reti

00000094 <JoinData_out>:
	  |
*/

uint32_t JoinData_out(uint8_t on_off, uint8_t r, uint8_t g , uint8_t b)
// adaptar dados para o hardware
{
  94:	ef 92       	push	r14
  96:	ff 92       	push	r15
  98:	0f 93       	push	r16
  9a:	1f 93       	push	r17
  9c:	cf 93       	push	r28
  9e:	df 93       	push	r29
  a0:	e8 2e       	mov	r14, r24
  a2:	f6 2e       	mov	r15, r22
  a4:	e0 e0       	ldi	r30, 0x00	; 0
  a6:	f0 e0       	ldi	r31, 0x00	; 0
	uint32_t data;
	uint8_t onoff_verde=0, verde_onoff=0;
	uint8_t i, g_temp=0;
  a8:	30 e0       	ldi	r19, 0x00	; 0
	
	/*inverter o verde (reverse)*/
	for(i=0;i<8;i++)
		g_temp |= ((g>>i)&1)<<(7-i);
  aa:	50 e0       	ldi	r21, 0x00	; 0
  ac:	07 e0       	ldi	r16, 0x07	; 7
  ae:	10 e0       	ldi	r17, 0x00	; 0
  b0:	da 01       	movw	r26, r20
  b2:	0e 2e       	mov	r0, r30
  b4:	02 c0       	rjmp	.+4      	; 0xba <JoinData_out+0x26>
  b6:	b5 95       	asr	r27
  b8:	a7 95       	ror	r26
  ba:	0a 94       	dec	r0
  bc:	e2 f7       	brpl	.-8      	; 0xb6 <JoinData_out+0x22>
  be:	a1 70       	andi	r26, 0x01	; 1
  c0:	bb 27       	eor	r27, r27
  c2:	e8 01       	movw	r28, r16
  c4:	ce 1b       	sub	r28, r30
  c6:	df 0b       	sbc	r29, r31
  c8:	0c 2e       	mov	r0, r28
  ca:	01 c0       	rjmp	.+2      	; 0xce <JoinData_out+0x3a>
  cc:	aa 0f       	add	r26, r26
  ce:	0a 94       	dec	r0
  d0:	ea f7       	brpl	.-6      	; 0xcc <JoinData_out+0x38>
  d2:	3a 2b       	or	r19, r26
  d4:	31 96       	adiw	r30, 0x01	; 1
	uint32_t data;
	uint8_t onoff_verde=0, verde_onoff=0;
	uint8_t i, g_temp=0;
	
	/*inverter o verde (reverse)*/
	for(i=0;i<8;i++)
  d6:	e8 30       	cpi	r30, 0x08	; 8
  d8:	f1 05       	cpc	r31, r1
  da:	51 f7       	brne	.-44     	; 0xb0 <JoinData_out+0x1c>
		g_temp |= ((g>>i)&1)<<(7-i);
	

	//another cosmetics because the stupid rgb matrix pinout's...
	
	g = (g_temp>>4) | (g_temp<<4); 
  dc:	32 95       	swap	r19

	/*dividir (e juntar) bytes (verde e onoff)*/
	onoff_verde  = (on_off&0xf0)|(g&0x0f);
  de:	63 2f       	mov	r22, r19
  e0:	6f 70       	andi	r22, 0x0F	; 15
  e2:	8e 2d       	mov	r24, r14
  e4:	80 7f       	andi	r24, 0xF0	; 240
  e6:	68 2b       	or	r22, r24
	verde_onoff  = (on_off&0x0f)|(g&0xf0);


	data = (uint32_t)(onoff_verde);				//[7:5] On/off 3º  [4:0] verde 2º invertido -> ncessário compensar
  e8:	86 2f       	mov	r24, r22
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	a0 e0       	ldi	r26, 0x00	; 0
  ee:	b0 e0       	ldi	r27, 0x00	; 0
	data = (uint32_t)(data<<8)|verde_onoff; 	//[7:5] Verde 1º invertido  [4:0] on/off 4º
  f0:	ba 2f       	mov	r27, r26
  f2:	a9 2f       	mov	r26, r25
  f4:	98 2f       	mov	r25, r24
  f6:	88 27       	eor	r24, r24
	
	g = (g_temp>>4) | (g_temp<<4); 

	/*dividir (e juntar) bytes (verde e onoff)*/
	onoff_verde  = (on_off&0xf0)|(g&0x0f);
	verde_onoff  = (on_off&0x0f)|(g&0xf0);
  f8:	30 7f       	andi	r19, 0xF0	; 240
  fa:	4e 2d       	mov	r20, r14
  fc:	4f 70       	andi	r20, 0x0F	; 15
  fe:	34 2b       	or	r19, r20


	data = (uint32_t)(onoff_verde);				//[7:5] On/off 3º  [4:0] verde 2º invertido -> ncessário compensar
	data = (uint32_t)(data<<8)|verde_onoff; 	//[7:5] Verde 1º invertido  [4:0] on/off 4º
 100:	83 2b       	or	r24, r19
	data = (uint32_t)(data<<8)|b;			//Azul 
 102:	ba 2f       	mov	r27, r26
 104:	a9 2f       	mov	r26, r25
 106:	98 2f       	mov	r25, r24
 108:	88 27       	eor	r24, r24
 10a:	82 2b       	or	r24, r18
	data = (uint32_t)(data<<8)|r;				//Vermelho
 10c:	66 27       	eor	r22, r22
 10e:	78 2f       	mov	r23, r24
 110:	89 2f       	mov	r24, r25
 112:	9a 2f       	mov	r25, r26
 114:	6f 29       	or	r22, r15

	return data;
}
 116:	cd b7       	in	r28, 0x3d	; 61
 118:	de b7       	in	r29, 0x3e	; 62
 11a:	e6 e0       	ldi	r30, 0x06	; 6
 11c:	4f c1       	rjmp	.+670    	; 0x3bc <__epilogue_restores__+0x18>

0000011e <shift>:
}



void shift(uint32_t data)
{
 11e:	0f 93       	push	r16
 120:	1f 93       	push	r17
	uint8_t i,temp;

	_low(LATCH_CK);
 122:	c3 98       	cbi	0x18, 3	; 24
	_low(SHIFT_CK);
 124:	c0 98       	cbi	0x18, 0	; 24
 126:	40 e0       	ldi	r20, 0x00	; 0
 128:	50 e0       	ldi	r21, 0x00	; 0

	for(i=0; i<32; i++){
		
		_low(SHIFT_CK);
 12a:	c0 98       	cbi	0x18, 0	; 24

		if((data>>i)&(0x1))
 12c:	8b 01       	movw	r16, r22
 12e:	9c 01       	movw	r18, r24
 130:	04 2e       	mov	r0, r20
 132:	04 c0       	rjmp	.+8      	; 0x13c <shift+0x1e>
 134:	36 95       	lsr	r19
 136:	27 95       	ror	r18
 138:	17 95       	ror	r17
 13a:	07 95       	ror	r16
 13c:	0a 94       	dec	r0
 13e:	d2 f7       	brpl	.-12     	; 0x134 <shift+0x16>
 140:	00 ff       	sbrs	r16, 0
 142:	02 c0       	rjmp	.+4      	; 0x148 <shift+0x2a>
			_high(DATA_0);
 144:	c4 9a       	sbi	0x18, 4	; 24
 146:	01 c0       	rjmp	.+2      	; 0x14a <shift+0x2c>
		else
			_low(DATA_0);
 148:	c4 98       	cbi	0x18, 4	; 24

		_high(SHIFT_CK);
 14a:	c0 9a       	sbi	0x18, 0	; 24
 14c:	4f 5f       	subi	r20, 0xFF	; 255
 14e:	5f 4f       	sbci	r21, 0xFF	; 255
	uint8_t i,temp;

	_low(LATCH_CK);
	_low(SHIFT_CK);

	for(i=0; i<32; i++){
 150:	40 32       	cpi	r20, 0x20	; 32
 152:	51 05       	cpc	r21, r1
 154:	51 f7       	brne	.-44     	; 0x12a <shift+0xc>
			_low(DATA_0);

		_high(SHIFT_CK);
	}
	
	_high(LATCH_CK);
 156:	c3 9a       	sbi	0x18, 3	; 24
	_low(LATCH_CK);
 158:	c3 98       	cbi	0x18, 3	; 24
}
 15a:	1f 91       	pop	r17
 15c:	0f 91       	pop	r16
 15e:	08 95       	ret

00000160 <serOut>:

	sei();
}

void serOut(const char* str)		/**/
{
 160:	cf 93       	push	r28
 162:	df 93       	push	r29
 164:	ec 01       	movw	r28, r24
   while (*str) TxByte (*str++);
 166:	89 91       	ld	r24, Y+
 168:	88 23       	and	r24, r24
 16a:	19 f0       	breq	.+6      	; 0x172 <serOut+0x12>
 16c:	65 e1       	ldi	r22, 0x15	; 21
 16e:	73 df       	rcall	.-282    	; 0x56 <TxTimedByte>
 170:	fa cf       	rjmp	.-12     	; 0x166 <serOut+0x6>
}
 172:	df 91       	pop	r29
 174:	cf 91       	pop	r28
 176:	08 95       	ret

00000178 <main>:
	CLKPR = 0b10000000;
	CLKPR = 0b00000000;
}

int main()
{
 178:	a0 e0       	ldi	r26, 0x00	; 0
 17a:	b0 e0       	ldi	r27, 0x00	; 0
 17c:	e1 ec       	ldi	r30, 0xC1	; 193
 17e:	f0 e0       	ldi	r31, 0x00	; 0
 180:	00 c1       	rjmp	.+512    	; 0x382 <__prologue_saves__+0x16>



inline void Set8Mhz()
{
	CLKPR = 0b10000000;
 182:	80 e8       	ldi	r24, 0x80	; 128
 184:	86 bd       	out	0x26, r24	; 38
	CLKPR = 0b00000000;
 186:	16 bc       	out	0x26, r1	; 38

inline void HdInit()
{
	/* Configure  my "soft-step" timer for the app */
	/* 0.5ms shoud be ok  4000 clock operations between ticks  */ 
	TCCR0A |= (1<<WGM01);
 188:	8a b5       	in	r24, 0x2a	; 42
 18a:	82 60       	ori	r24, 0x02	; 2
 18c:	8a bd       	out	0x2a, r24	; 42
	TCCR0B |= (1<<CS01);
 18e:	83 b7       	in	r24, 0x33	; 51
 190:	82 60       	ori	r24, 0x02	; 2
 192:	83 bf       	out	0x33, r24	; 51
	OCR0A = 249; //249
 194:	89 ef       	ldi	r24, 0xF9	; 249
 196:	89 bd       	out	0x29, r24	; 41
	TIMSK |= (1<<OCIE0A);
 198:	89 b7       	in	r24, 0x39	; 57
 19a:	80 61       	ori	r24, 0x10	; 16
 19c:	89 bf       	out	0x39, r24	; 57

	/*set outputs*/
	DDRB |= (1<<BLINK) |(1<<LATCH_CK)|(1<<SHIFT_CK)|(1<<DATA_0);
 19e:	87 b3       	in	r24, 0x17	; 23
 1a0:	89 61       	ori	r24, 0x19	; 25
 1a2:	87 bb       	out	0x17, r24	; 23

	sei();
 1a4:	78 94       	sei
}

int main()
{
	Set8Mhz();
	uint8_t request_count=0;
 1a6:	d1 2c       	mov	r13, r1
	for(;;)
	{   
	    if(flag_comm>0){
			
		    TIMSK &= ~(1<<OCIE0A);						//desliga interrupção timer
		    sprintf(text, " -%d%d-\n", request_count/8, request_count%8);
 1a8:	08 e7       	ldi	r16, 0x78	; 120
 1aa:	10 e0       	ldi	r17, 0x00	; 0
 1ac:	85 e8       	ldi	r24, 0x85	; 133
 1ae:	e8 2e       	mov	r14, r24
 1b0:	80 e0       	ldi	r24, 0x00	; 0
 1b2:	f8 2e       	mov	r15, r24
	HdInit();	


	for(;;)
	{   
	    if(flag_comm>0){
 1b4:	80 91 82 00 	lds	r24, 0x0082
 1b8:	88 23       	and	r24, r24
 1ba:	e1 f3       	breq	.-8      	; 0x1b4 <main+0x3c>
			
		    TIMSK &= ~(1<<OCIE0A);						//desliga interrupção timer
 1bc:	89 b7       	in	r24, 0x39	; 57
 1be:	8f 7e       	andi	r24, 0xEF	; 239
 1c0:	89 bf       	out	0x39, r24	; 57
		    sprintf(text, " -%d%d-\n", request_count/8, request_count%8);
 1c2:	8d 2d       	mov	r24, r13
 1c4:	87 70       	andi	r24, 0x07	; 7
 1c6:	c8 2f       	mov	r28, r24
 1c8:	d0 e0       	ldi	r29, 0x00	; 0
 1ca:	1f 92       	push	r1
 1cc:	8f 93       	push	r24
 1ce:	1f 92       	push	r1
 1d0:	8d 2d       	mov	r24, r13
 1d2:	86 95       	lsr	r24
 1d4:	86 95       	lsr	r24
 1d6:	86 95       	lsr	r24
 1d8:	8f 93       	push	r24
 1da:	1f 93       	push	r17
 1dc:	0f 93       	push	r16
 1de:	ff 92       	push	r15
 1e0:	ef 92       	push	r14
 1e2:	fb d0       	rcall	.+502    	; 0x3da <sprintf>
		    serOut(text);
 1e4:	85 e8       	ldi	r24, 0x85	; 133
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	bb df       	rcall	.-138    	; 0x160 <serOut>
		    
		    if(request_count<8){
 1ea:	8d b7       	in	r24, 0x3d	; 61
 1ec:	9e b7       	in	r25, 0x3e	; 62
 1ee:	08 96       	adiw	r24, 0x08	; 8
 1f0:	0f b6       	in	r0, 0x3f	; 63
 1f2:	f8 94       	cli
 1f4:	9e bf       	out	0x3e, r25	; 62
 1f6:	0f be       	out	0x3f, r0	; 63
 1f8:	8d bf       	out	0x3d, r24	; 61
 1fa:	97 e0       	ldi	r25, 0x07	; 7
 1fc:	9d 15       	cp	r25, r13
 1fe:	30 f0       	brcs	.+12     	; 0x20c <main+0x94>
		    	red[request_count%8] = RxByte();
 200:	65 e1       	ldi	r22, 0x15	; 21
 202:	8e e1       	ldi	r24, 0x1E	; 30
 204:	37 df       	rcall	.-402    	; 0x74 <RxTimedByte>
 206:	c0 59       	subi	r28, 0x90	; 144
 208:	df 4f       	sbci	r29, 0xFF	; 255
 20a:	08 c0       	rjmp	.+16     	; 0x21c <main+0xa4>
		    	/*_delay_us(200);
		    	sprintf(text," valor lifo :%c -- request_count: %d", red[request_count], request_count);
		    	serOut(text);
		     	_delay_us(200);*/
		    }
		    else if(request_count<16){
 20c:	8f e0       	ldi	r24, 0x0F	; 15
		    	green[request_count%8] = RxByte();
 20e:	65 e1       	ldi	r22, 0x15	; 21
		    	/*_delay_us(200);
		    	sprintf(text," valor lifo :%c -- request_count: %d", red[request_count], request_count);
		    	serOut(text);
		     	_delay_us(200);*/
		    }
		    else if(request_count<16){
 210:	8d 15       	cp	r24, r13
 212:	30 f0       	brcs	.+12     	; 0x220 <main+0xa8>
		    	green[request_count%8] = RxByte();
 214:	8e e1       	ldi	r24, 0x1E	; 30
 216:	2e df       	rcall	.-420    	; 0x74 <RxTimedByte>
 218:	c8 59       	subi	r28, 0x98	; 152
 21a:	df 4f       	sbci	r29, 0xFF	; 255
 21c:	88 83       	st	Y, r24
 21e:	08 c0       	rjmp	.+16     	; 0x230 <main+0xb8>
		    }
		    else{
		    	blue[request_count%8] = RxByte();
 220:	8e e1       	ldi	r24, 0x1E	; 30
 222:	28 df       	rcall	.-432    	; 0x74 <RxTimedByte>
 224:	c0 5a       	subi	r28, 0xA0	; 160
 226:	df 4f       	sbci	r29, 0xFF	; 255
 228:	88 83       	st	Y, r24
		    }

   			if(request_count>22)
 22a:	96 e1       	ldi	r25, 0x16	; 22
 22c:	9d 15       	cp	r25, r13
 22e:	10 f0       	brcs	.+4      	; 0x234 <main+0xbc>
		    	request_count=0;
		    else
		    	request_count++;
 230:	d3 94       	inc	r13
 232:	01 c0       	rjmp	.+2      	; 0x236 <main+0xbe>
		    else{
		    	blue[request_count%8] = RxByte();
		    }

   			if(request_count>22)
		    	request_count=0;
 234:	d1 2c       	mov	r13, r1
		    else
		    	request_count++;
   			
       		TIMSK |= (1<<OCIE0A);						//liga interrupções timer					
 236:	89 b7       	in	r24, 0x39	; 57
 238:	80 61       	ori	r24, 0x10	; 16
 23a:	89 bf       	out	0x39, r24	; 57
       		flag_comm =0;
 23c:	10 92 82 00 	sts	0x0082, r1
 240:	b9 cf       	rjmp	.-142    	; 0x1b4 <main+0x3c>

00000242 <__vector_10>:
    }
   		
}


ISR(TIMER0_COMPA_vect){
 242:	1f 92       	push	r1
 244:	0f 92       	push	r0
 246:	0f b6       	in	r0, 0x3f	; 63
 248:	0f 92       	push	r0
 24a:	11 24       	eor	r1, r1
 24c:	2f 93       	push	r18
 24e:	3f 93       	push	r19
 250:	4f 93       	push	r20
 252:	5f 93       	push	r21
 254:	6f 93       	push	r22
 256:	7f 93       	push	r23
 258:	8f 93       	push	r24
 25a:	9f 93       	push	r25
 25c:	af 93       	push	r26
 25e:	bf 93       	push	r27
 260:	ef 93       	push	r30
 262:	ff 93       	push	r31



	if(timer==0)
 264:	80 91 84 00 	lds	r24, 0x0084
 268:	81 11       	cpse	r24, r1
 26a:	0b c0       	rjmp	.+22     	; 0x282 <__stack+0x23>
		data = JoinData_out((1<<linha), red[linha], 255, 255);
 26c:	e0 91 83 00 	lds	r30, 0x0083
 270:	90 91 83 00 	lds	r25, 0x0083
 274:	f0 e0       	ldi	r31, 0x00	; 0
 276:	e0 59       	subi	r30, 0x90	; 144
 278:	ff 4f       	sbci	r31, 0xFF	; 255
 27a:	2f ef       	ldi	r18, 0xFF	; 255
 27c:	4f ef       	ldi	r20, 0xFF	; 255
 27e:	60 81       	ld	r22, Z
 280:	2a c0       	rjmp	.+84     	; 0x2d6 <__stack+0x77>
	else if(timer==1)
 282:	80 91 84 00 	lds	r24, 0x0084
 286:	81 30       	cpi	r24, 0x01	; 1
 288:	c1 f4       	brne	.+48     	; 0x2ba <__stack+0x5b>
		data = JoinData_out((1<<linha), 255,255, blue[linha]);
 28a:	e0 91 83 00 	lds	r30, 0x0083
 28e:	90 91 83 00 	lds	r25, 0x0083
 292:	f0 e0       	ldi	r31, 0x00	; 0
 294:	e0 5a       	subi	r30, 0xA0	; 160
 296:	ff 4f       	sbci	r31, 0xFF	; 255
 298:	20 81       	ld	r18, Z
 29a:	4f ef       	ldi	r20, 0xFF	; 255
 29c:	6f ef       	ldi	r22, 0xFF	; 255
 29e:	01 c0       	rjmp	.+2      	; 0x2a2 <__stack+0x43>
 2a0:	88 0f       	add	r24, r24
 2a2:	9a 95       	dec	r25
 2a4:	ea f7       	brpl	.-6      	; 0x2a0 <__stack+0x41>
 2a6:	f6 de       	rcall	.-532    	; 0x94 <JoinData_out>
 2a8:	60 93 b8 00 	sts	0x00B8, r22
 2ac:	70 93 b9 00 	sts	0x00B9, r23
 2b0:	80 93 ba 00 	sts	0x00BA, r24
 2b4:	90 93 bb 00 	sts	0x00BB, r25
 2b8:	17 c0       	rjmp	.+46     	; 0x2e8 <__stack+0x89>
	else if(timer==2)
 2ba:	80 91 84 00 	lds	r24, 0x0084
 2be:	82 30       	cpi	r24, 0x02	; 2
 2c0:	61 f4       	brne	.+24     	; 0x2da <__stack+0x7b>
		data = JoinData_out((1<<linha), 255, green[linha], 255);
 2c2:	e0 91 83 00 	lds	r30, 0x0083
 2c6:	90 91 83 00 	lds	r25, 0x0083
 2ca:	f0 e0       	ldi	r31, 0x00	; 0
 2cc:	e8 59       	subi	r30, 0x98	; 152
 2ce:	ff 4f       	sbci	r31, 0xFF	; 255
 2d0:	2f ef       	ldi	r18, 0xFF	; 255
 2d2:	40 81       	ld	r20, Z
 2d4:	6f ef       	ldi	r22, 0xFF	; 255
 2d6:	81 e0       	ldi	r24, 0x01	; 1
 2d8:	e2 cf       	rjmp	.-60     	; 0x29e <__stack+0x3f>
	else if(timer==3)
 2da:	80 91 84 00 	lds	r24, 0x0084
 2de:	83 30       	cpi	r24, 0x03	; 3
 2e0:	19 f4       	brne	.+6      	; 0x2e8 <__stack+0x89>
		flag_comm=1;
 2e2:	81 e0       	ldi	r24, 0x01	; 1
 2e4:	80 93 82 00 	sts	0x0082, r24


	if(timer==3)
 2e8:	80 91 84 00 	lds	r24, 0x0084
 2ec:	83 30       	cpi	r24, 0x03	; 3
 2ee:	69 f4       	brne	.+26     	; 0x30a <__stack+0xab>
		data = JoinData_out(0,255,255,255);
 2f0:	2f ef       	ldi	r18, 0xFF	; 255
 2f2:	4f ef       	ldi	r20, 0xFF	; 255
 2f4:	6f ef       	ldi	r22, 0xFF	; 255
 2f6:	80 e0       	ldi	r24, 0x00	; 0
 2f8:	cd de       	rcall	.-614    	; 0x94 <JoinData_out>
 2fa:	60 93 b8 00 	sts	0x00B8, r22
 2fe:	70 93 b9 00 	sts	0x00B9, r23
 302:	80 93 ba 00 	sts	0x00BA, r24
 306:	90 93 bb 00 	sts	0x00BB, r25

	shift(data);
 30a:	60 91 b8 00 	lds	r22, 0x00B8
 30e:	70 91 b9 00 	lds	r23, 0x00B9
 312:	80 91 ba 00 	lds	r24, 0x00BA
 316:	90 91 bb 00 	lds	r25, 0x00BB
 31a:	01 df       	rcall	.-510    	; 0x11e <shift>


	if(linha==0){
 31c:	80 91 83 00 	lds	r24, 0x0083
 320:	81 11       	cpse	r24, r1
 322:	0e c0       	rjmp	.+28     	; 0x340 <__stack+0xe1>
		linha = 8;
 324:	88 e0       	ldi	r24, 0x08	; 8
 326:	80 93 83 00 	sts	0x0083, r24
		timer++;
 32a:	80 91 84 00 	lds	r24, 0x0084
 32e:	8f 5f       	subi	r24, 0xFF	; 255
 330:	80 93 84 00 	sts	0x0084, r24
		if(timer>3)	
 334:	80 91 84 00 	lds	r24, 0x0084
 338:	84 30       	cpi	r24, 0x04	; 4
 33a:	10 f0       	brcs	.+4      	; 0x340 <__stack+0xe1>
			timer = 0;
 33c:	10 92 84 00 	sts	0x0084, r1
	}

	linha--;
 340:	80 91 83 00 	lds	r24, 0x0083
 344:	81 50       	subi	r24, 0x01	; 1
 346:	80 93 83 00 	sts	0x0083, r24
 34a:	ff 91       	pop	r31
 34c:	ef 91       	pop	r30
 34e:	bf 91       	pop	r27
 350:	af 91       	pop	r26
 352:	9f 91       	pop	r25
 354:	8f 91       	pop	r24
 356:	7f 91       	pop	r23
 358:	6f 91       	pop	r22
 35a:	5f 91       	pop	r21
 35c:	4f 91       	pop	r20
 35e:	3f 91       	pop	r19
 360:	2f 91       	pop	r18
 362:	0f 90       	pop	r0
 364:	0f be       	out	0x3f, r0	; 63
 366:	0f 90       	pop	r0
 368:	1f 90       	pop	r1
 36a:	18 95       	reti

0000036c <__prologue_saves__>:
 36c:	2f 92       	push	r2
 36e:	3f 92       	push	r3
 370:	4f 92       	push	r4
 372:	5f 92       	push	r5
 374:	6f 92       	push	r6
 376:	7f 92       	push	r7
 378:	8f 92       	push	r8
 37a:	9f 92       	push	r9
 37c:	af 92       	push	r10
 37e:	bf 92       	push	r11
 380:	cf 92       	push	r12
 382:	df 92       	push	r13
 384:	ef 92       	push	r14
 386:	ff 92       	push	r15
 388:	0f 93       	push	r16
 38a:	1f 93       	push	r17
 38c:	cf 93       	push	r28
 38e:	df 93       	push	r29
 390:	cd b7       	in	r28, 0x3d	; 61
 392:	de b7       	in	r29, 0x3e	; 62
 394:	ca 1b       	sub	r28, r26
 396:	db 0b       	sbc	r29, r27
 398:	0f b6       	in	r0, 0x3f	; 63
 39a:	f8 94       	cli
 39c:	de bf       	out	0x3e, r29	; 62
 39e:	0f be       	out	0x3f, r0	; 63
 3a0:	cd bf       	out	0x3d, r28	; 61
 3a2:	09 94       	ijmp

000003a4 <__epilogue_restores__>:
 3a4:	2a 88       	ldd	r2, Y+18	; 0x12
 3a6:	39 88       	ldd	r3, Y+17	; 0x11
 3a8:	48 88       	ldd	r4, Y+16	; 0x10
 3aa:	5f 84       	ldd	r5, Y+15	; 0x0f
 3ac:	6e 84       	ldd	r6, Y+14	; 0x0e
 3ae:	7d 84       	ldd	r7, Y+13	; 0x0d
 3b0:	8c 84       	ldd	r8, Y+12	; 0x0c
 3b2:	9b 84       	ldd	r9, Y+11	; 0x0b
 3b4:	aa 84       	ldd	r10, Y+10	; 0x0a
 3b6:	b9 84       	ldd	r11, Y+9	; 0x09
 3b8:	c8 84       	ldd	r12, Y+8	; 0x08
 3ba:	df 80       	ldd	r13, Y+7	; 0x07
 3bc:	ee 80       	ldd	r14, Y+6	; 0x06
 3be:	fd 80       	ldd	r15, Y+5	; 0x05
 3c0:	0c 81       	ldd	r16, Y+4	; 0x04
 3c2:	1b 81       	ldd	r17, Y+3	; 0x03
 3c4:	aa 81       	ldd	r26, Y+2	; 0x02
 3c6:	b9 81       	ldd	r27, Y+1	; 0x01
 3c8:	ce 0f       	add	r28, r30
 3ca:	d1 1d       	adc	r29, r1
 3cc:	0f b6       	in	r0, 0x3f	; 63
 3ce:	f8 94       	cli
 3d0:	de bf       	out	0x3e, r29	; 62
 3d2:	0f be       	out	0x3f, r0	; 63
 3d4:	cd bf       	out	0x3d, r28	; 61
 3d6:	ed 01       	movw	r28, r26
 3d8:	08 95       	ret

000003da <sprintf>:
 3da:	ae e0       	ldi	r26, 0x0E	; 14
 3dc:	b0 e0       	ldi	r27, 0x00	; 0
 3de:	e2 ef       	ldi	r30, 0xF2	; 242
 3e0:	f1 e0       	ldi	r31, 0x01	; 1
 3e2:	d2 cf       	rjmp	.-92     	; 0x388 <__prologue_saves__+0x1c>
 3e4:	0d 89       	ldd	r16, Y+21	; 0x15
 3e6:	1e 89       	ldd	r17, Y+22	; 0x16
 3e8:	86 e0       	ldi	r24, 0x06	; 6
 3ea:	8c 83       	std	Y+4, r24	; 0x04
 3ec:	1a 83       	std	Y+2, r17	; 0x02
 3ee:	09 83       	std	Y+1, r16	; 0x01
 3f0:	8f ef       	ldi	r24, 0xFF	; 255
 3f2:	9f e7       	ldi	r25, 0x7F	; 127
 3f4:	9e 83       	std	Y+6, r25	; 0x06
 3f6:	8d 83       	std	Y+5, r24	; 0x05
 3f8:	ae 01       	movw	r20, r28
 3fa:	47 5e       	subi	r20, 0xE7	; 231
 3fc:	5f 4f       	sbci	r21, 0xFF	; 255
 3fe:	6f 89       	ldd	r22, Y+23	; 0x17
 400:	78 8d       	ldd	r23, Y+24	; 0x18
 402:	ce 01       	movw	r24, r28
 404:	01 96       	adiw	r24, 0x01	; 1
 406:	08 d0       	rcall	.+16     	; 0x418 <vfprintf>
 408:	ef 81       	ldd	r30, Y+7	; 0x07
 40a:	f8 85       	ldd	r31, Y+8	; 0x08
 40c:	e0 0f       	add	r30, r16
 40e:	f1 1f       	adc	r31, r17
 410:	10 82       	st	Z, r1
 412:	2e 96       	adiw	r28, 0x0e	; 14
 414:	e4 e0       	ldi	r30, 0x04	; 4
 416:	d4 cf       	rjmp	.-88     	; 0x3c0 <__epilogue_restores__+0x1c>

00000418 <vfprintf>:
 418:	ac e0       	ldi	r26, 0x0C	; 12
 41a:	b0 e0       	ldi	r27, 0x00	; 0
 41c:	e1 e1       	ldi	r30, 0x11	; 17
 41e:	f2 e0       	ldi	r31, 0x02	; 2
 420:	a5 cf       	rjmp	.-182    	; 0x36c <__prologue_saves__>
 422:	7c 01       	movw	r14, r24
 424:	6b 01       	movw	r12, r22
 426:	8a 01       	movw	r16, r20
 428:	fc 01       	movw	r30, r24
 42a:	17 82       	std	Z+7, r1	; 0x07
 42c:	16 82       	std	Z+6, r1	; 0x06
 42e:	83 81       	ldd	r24, Z+3	; 0x03
 430:	81 ff       	sbrs	r24, 1
 432:	b0 c1       	rjmp	.+864    	; 0x794 <vfprintf+0x37c>
 434:	ce 01       	movw	r24, r28
 436:	01 96       	adiw	r24, 0x01	; 1
 438:	4c 01       	movw	r8, r24
 43a:	f7 01       	movw	r30, r14
 43c:	93 81       	ldd	r25, Z+3	; 0x03
 43e:	f6 01       	movw	r30, r12
 440:	93 fd       	sbrc	r25, 3
 442:	85 91       	lpm	r24, Z+
 444:	93 ff       	sbrs	r25, 3
 446:	81 91       	ld	r24, Z+
 448:	6f 01       	movw	r12, r30
 44a:	88 23       	and	r24, r24
 44c:	09 f4       	brne	.+2      	; 0x450 <vfprintf+0x38>
 44e:	9e c1       	rjmp	.+828    	; 0x78c <vfprintf+0x374>
 450:	85 32       	cpi	r24, 0x25	; 37
 452:	39 f4       	brne	.+14     	; 0x462 <vfprintf+0x4a>
 454:	93 fd       	sbrc	r25, 3
 456:	85 91       	lpm	r24, Z+
 458:	93 ff       	sbrs	r25, 3
 45a:	81 91       	ld	r24, Z+
 45c:	6f 01       	movw	r12, r30
 45e:	85 32       	cpi	r24, 0x25	; 37
 460:	21 f4       	brne	.+8      	; 0x46a <vfprintf+0x52>
 462:	b7 01       	movw	r22, r14
 464:	90 e0       	ldi	r25, 0x00	; 0
 466:	b1 d1       	rcall	.+866    	; 0x7ca <fputc>
 468:	e8 cf       	rjmp	.-48     	; 0x43a <vfprintf+0x22>
 46a:	51 2c       	mov	r5, r1
 46c:	31 2c       	mov	r3, r1
 46e:	20 e0       	ldi	r18, 0x00	; 0
 470:	20 32       	cpi	r18, 0x20	; 32
 472:	a0 f4       	brcc	.+40     	; 0x49c <vfprintf+0x84>
 474:	8b 32       	cpi	r24, 0x2B	; 43
 476:	69 f0       	breq	.+26     	; 0x492 <vfprintf+0x7a>
 478:	30 f4       	brcc	.+12     	; 0x486 <vfprintf+0x6e>
 47a:	80 32       	cpi	r24, 0x20	; 32
 47c:	59 f0       	breq	.+22     	; 0x494 <vfprintf+0x7c>
 47e:	83 32       	cpi	r24, 0x23	; 35
 480:	69 f4       	brne	.+26     	; 0x49c <vfprintf+0x84>
 482:	20 61       	ori	r18, 0x10	; 16
 484:	2c c0       	rjmp	.+88     	; 0x4de <vfprintf+0xc6>
 486:	8d 32       	cpi	r24, 0x2D	; 45
 488:	39 f0       	breq	.+14     	; 0x498 <vfprintf+0x80>
 48a:	80 33       	cpi	r24, 0x30	; 48
 48c:	39 f4       	brne	.+14     	; 0x49c <vfprintf+0x84>
 48e:	21 60       	ori	r18, 0x01	; 1
 490:	26 c0       	rjmp	.+76     	; 0x4de <vfprintf+0xc6>
 492:	22 60       	ori	r18, 0x02	; 2
 494:	24 60       	ori	r18, 0x04	; 4
 496:	23 c0       	rjmp	.+70     	; 0x4de <vfprintf+0xc6>
 498:	28 60       	ori	r18, 0x08	; 8
 49a:	21 c0       	rjmp	.+66     	; 0x4de <vfprintf+0xc6>
 49c:	27 fd       	sbrc	r18, 7
 49e:	27 c0       	rjmp	.+78     	; 0x4ee <vfprintf+0xd6>
 4a0:	30 ed       	ldi	r19, 0xD0	; 208
 4a2:	38 0f       	add	r19, r24
 4a4:	3a 30       	cpi	r19, 0x0A	; 10
 4a6:	78 f4       	brcc	.+30     	; 0x4c6 <vfprintf+0xae>
 4a8:	26 ff       	sbrs	r18, 6
 4aa:	06 c0       	rjmp	.+12     	; 0x4b8 <vfprintf+0xa0>
 4ac:	85 2d       	mov	r24, r5
 4ae:	6a e0       	ldi	r22, 0x0A	; 10
 4b0:	1e d2       	rcall	.+1084   	; 0x8ee <__mulqi3>
 4b2:	58 2e       	mov	r5, r24
 4b4:	53 0e       	add	r5, r19
 4b6:	13 c0       	rjmp	.+38     	; 0x4de <vfprintf+0xc6>
 4b8:	83 2d       	mov	r24, r3
 4ba:	6a e0       	ldi	r22, 0x0A	; 10
 4bc:	18 d2       	rcall	.+1072   	; 0x8ee <__mulqi3>
 4be:	38 2e       	mov	r3, r24
 4c0:	33 0e       	add	r3, r19
 4c2:	20 62       	ori	r18, 0x20	; 32
 4c4:	0c c0       	rjmp	.+24     	; 0x4de <vfprintf+0xc6>
 4c6:	8e 32       	cpi	r24, 0x2E	; 46
 4c8:	21 f4       	brne	.+8      	; 0x4d2 <vfprintf+0xba>
 4ca:	26 fd       	sbrc	r18, 6
 4cc:	5f c1       	rjmp	.+702    	; 0x78c <vfprintf+0x374>
 4ce:	20 64       	ori	r18, 0x40	; 64
 4d0:	06 c0       	rjmp	.+12     	; 0x4de <vfprintf+0xc6>
 4d2:	8c 36       	cpi	r24, 0x6C	; 108
 4d4:	11 f4       	brne	.+4      	; 0x4da <vfprintf+0xc2>
 4d6:	20 68       	ori	r18, 0x80	; 128
 4d8:	02 c0       	rjmp	.+4      	; 0x4de <vfprintf+0xc6>
 4da:	88 36       	cpi	r24, 0x68	; 104
 4dc:	41 f4       	brne	.+16     	; 0x4ee <vfprintf+0xd6>
 4de:	f6 01       	movw	r30, r12
 4e0:	93 fd       	sbrc	r25, 3
 4e2:	85 91       	lpm	r24, Z+
 4e4:	93 ff       	sbrs	r25, 3
 4e6:	81 91       	ld	r24, Z+
 4e8:	6f 01       	movw	r12, r30
 4ea:	81 11       	cpse	r24, r1
 4ec:	c1 cf       	rjmp	.-126    	; 0x470 <vfprintf+0x58>
 4ee:	98 2f       	mov	r25, r24
 4f0:	9f 7d       	andi	r25, 0xDF	; 223
 4f2:	95 54       	subi	r25, 0x45	; 69
 4f4:	93 30       	cpi	r25, 0x03	; 3
 4f6:	28 f4       	brcc	.+10     	; 0x502 <vfprintf+0xea>
 4f8:	0c 5f       	subi	r16, 0xFC	; 252
 4fa:	1f 4f       	sbci	r17, 0xFF	; 255
 4fc:	ff e3       	ldi	r31, 0x3F	; 63
 4fe:	f9 83       	std	Y+1, r31	; 0x01
 500:	0d c0       	rjmp	.+26     	; 0x51c <vfprintf+0x104>
 502:	83 36       	cpi	r24, 0x63	; 99
 504:	31 f0       	breq	.+12     	; 0x512 <vfprintf+0xfa>
 506:	83 37       	cpi	r24, 0x73	; 115
 508:	71 f0       	breq	.+28     	; 0x526 <vfprintf+0x10e>
 50a:	83 35       	cpi	r24, 0x53	; 83
 50c:	09 f0       	breq	.+2      	; 0x510 <vfprintf+0xf8>
 50e:	57 c0       	rjmp	.+174    	; 0x5be <vfprintf+0x1a6>
 510:	21 c0       	rjmp	.+66     	; 0x554 <vfprintf+0x13c>
 512:	f8 01       	movw	r30, r16
 514:	80 81       	ld	r24, Z
 516:	89 83       	std	Y+1, r24	; 0x01
 518:	0e 5f       	subi	r16, 0xFE	; 254
 51a:	1f 4f       	sbci	r17, 0xFF	; 255
 51c:	44 24       	eor	r4, r4
 51e:	43 94       	inc	r4
 520:	51 2c       	mov	r5, r1
 522:	54 01       	movw	r10, r8
 524:	14 c0       	rjmp	.+40     	; 0x54e <vfprintf+0x136>
 526:	38 01       	movw	r6, r16
 528:	f2 e0       	ldi	r31, 0x02	; 2
 52a:	6f 0e       	add	r6, r31
 52c:	71 1c       	adc	r7, r1
 52e:	f8 01       	movw	r30, r16
 530:	a0 80       	ld	r10, Z
 532:	b1 80       	ldd	r11, Z+1	; 0x01
 534:	26 ff       	sbrs	r18, 6
 536:	03 c0       	rjmp	.+6      	; 0x53e <vfprintf+0x126>
 538:	65 2d       	mov	r22, r5
 53a:	70 e0       	ldi	r23, 0x00	; 0
 53c:	02 c0       	rjmp	.+4      	; 0x542 <vfprintf+0x12a>
 53e:	6f ef       	ldi	r22, 0xFF	; 255
 540:	7f ef       	ldi	r23, 0xFF	; 255
 542:	c5 01       	movw	r24, r10
 544:	2c 87       	std	Y+12, r18	; 0x0c
 546:	36 d1       	rcall	.+620    	; 0x7b4 <strnlen>
 548:	2c 01       	movw	r4, r24
 54a:	83 01       	movw	r16, r6
 54c:	2c 85       	ldd	r18, Y+12	; 0x0c
 54e:	2f 77       	andi	r18, 0x7F	; 127
 550:	22 2e       	mov	r2, r18
 552:	16 c0       	rjmp	.+44     	; 0x580 <vfprintf+0x168>
 554:	38 01       	movw	r6, r16
 556:	f2 e0       	ldi	r31, 0x02	; 2
 558:	6f 0e       	add	r6, r31
 55a:	71 1c       	adc	r7, r1
 55c:	f8 01       	movw	r30, r16
 55e:	a0 80       	ld	r10, Z
 560:	b1 80       	ldd	r11, Z+1	; 0x01
 562:	26 ff       	sbrs	r18, 6
 564:	03 c0       	rjmp	.+6      	; 0x56c <vfprintf+0x154>
 566:	65 2d       	mov	r22, r5
 568:	70 e0       	ldi	r23, 0x00	; 0
 56a:	02 c0       	rjmp	.+4      	; 0x570 <vfprintf+0x158>
 56c:	6f ef       	ldi	r22, 0xFF	; 255
 56e:	7f ef       	ldi	r23, 0xFF	; 255
 570:	c5 01       	movw	r24, r10
 572:	2c 87       	std	Y+12, r18	; 0x0c
 574:	14 d1       	rcall	.+552    	; 0x79e <strnlen_P>
 576:	2c 01       	movw	r4, r24
 578:	2c 85       	ldd	r18, Y+12	; 0x0c
 57a:	20 68       	ori	r18, 0x80	; 128
 57c:	22 2e       	mov	r2, r18
 57e:	83 01       	movw	r16, r6
 580:	23 fc       	sbrc	r2, 3
 582:	19 c0       	rjmp	.+50     	; 0x5b6 <vfprintf+0x19e>
 584:	83 2d       	mov	r24, r3
 586:	90 e0       	ldi	r25, 0x00	; 0
 588:	48 16       	cp	r4, r24
 58a:	59 06       	cpc	r5, r25
 58c:	a0 f4       	brcc	.+40     	; 0x5b6 <vfprintf+0x19e>
 58e:	b7 01       	movw	r22, r14
 590:	80 e2       	ldi	r24, 0x20	; 32
 592:	90 e0       	ldi	r25, 0x00	; 0
 594:	1a d1       	rcall	.+564    	; 0x7ca <fputc>
 596:	3a 94       	dec	r3
 598:	f5 cf       	rjmp	.-22     	; 0x584 <vfprintf+0x16c>
 59a:	f5 01       	movw	r30, r10
 59c:	27 fc       	sbrc	r2, 7
 59e:	85 91       	lpm	r24, Z+
 5a0:	27 fe       	sbrs	r2, 7
 5a2:	81 91       	ld	r24, Z+
 5a4:	5f 01       	movw	r10, r30
 5a6:	b7 01       	movw	r22, r14
 5a8:	90 e0       	ldi	r25, 0x00	; 0
 5aa:	0f d1       	rcall	.+542    	; 0x7ca <fputc>
 5ac:	31 10       	cpse	r3, r1
 5ae:	3a 94       	dec	r3
 5b0:	f1 e0       	ldi	r31, 0x01	; 1
 5b2:	4f 1a       	sub	r4, r31
 5b4:	51 08       	sbc	r5, r1
 5b6:	41 14       	cp	r4, r1
 5b8:	51 04       	cpc	r5, r1
 5ba:	79 f7       	brne	.-34     	; 0x59a <vfprintf+0x182>
 5bc:	de c0       	rjmp	.+444    	; 0x77a <vfprintf+0x362>
 5be:	84 36       	cpi	r24, 0x64	; 100
 5c0:	11 f0       	breq	.+4      	; 0x5c6 <vfprintf+0x1ae>
 5c2:	89 36       	cpi	r24, 0x69	; 105
 5c4:	31 f5       	brne	.+76     	; 0x612 <vfprintf+0x1fa>
 5c6:	f8 01       	movw	r30, r16
 5c8:	27 ff       	sbrs	r18, 7
 5ca:	07 c0       	rjmp	.+14     	; 0x5da <vfprintf+0x1c2>
 5cc:	60 81       	ld	r22, Z
 5ce:	71 81       	ldd	r23, Z+1	; 0x01
 5d0:	82 81       	ldd	r24, Z+2	; 0x02
 5d2:	93 81       	ldd	r25, Z+3	; 0x03
 5d4:	0c 5f       	subi	r16, 0xFC	; 252
 5d6:	1f 4f       	sbci	r17, 0xFF	; 255
 5d8:	08 c0       	rjmp	.+16     	; 0x5ea <vfprintf+0x1d2>
 5da:	60 81       	ld	r22, Z
 5dc:	71 81       	ldd	r23, Z+1	; 0x01
 5de:	88 27       	eor	r24, r24
 5e0:	77 fd       	sbrc	r23, 7
 5e2:	80 95       	com	r24
 5e4:	98 2f       	mov	r25, r24
 5e6:	0e 5f       	subi	r16, 0xFE	; 254
 5e8:	1f 4f       	sbci	r17, 0xFF	; 255
 5ea:	2f 76       	andi	r18, 0x6F	; 111
 5ec:	b2 2e       	mov	r11, r18
 5ee:	97 ff       	sbrs	r25, 7
 5f0:	09 c0       	rjmp	.+18     	; 0x604 <vfprintf+0x1ec>
 5f2:	90 95       	com	r25
 5f4:	80 95       	com	r24
 5f6:	70 95       	com	r23
 5f8:	61 95       	neg	r22
 5fa:	7f 4f       	sbci	r23, 0xFF	; 255
 5fc:	8f 4f       	sbci	r24, 0xFF	; 255
 5fe:	9f 4f       	sbci	r25, 0xFF	; 255
 600:	20 68       	ori	r18, 0x80	; 128
 602:	b2 2e       	mov	r11, r18
 604:	2a e0       	ldi	r18, 0x0A	; 10
 606:	30 e0       	ldi	r19, 0x00	; 0
 608:	a4 01       	movw	r20, r8
 60a:	11 d1       	rcall	.+546    	; 0x82e <__ultoa_invert>
 60c:	a8 2e       	mov	r10, r24
 60e:	a8 18       	sub	r10, r8
 610:	43 c0       	rjmp	.+134    	; 0x698 <vfprintf+0x280>
 612:	85 37       	cpi	r24, 0x75	; 117
 614:	29 f4       	brne	.+10     	; 0x620 <vfprintf+0x208>
 616:	2f 7e       	andi	r18, 0xEF	; 239
 618:	b2 2e       	mov	r11, r18
 61a:	2a e0       	ldi	r18, 0x0A	; 10
 61c:	30 e0       	ldi	r19, 0x00	; 0
 61e:	25 c0       	rjmp	.+74     	; 0x66a <vfprintf+0x252>
 620:	f2 2f       	mov	r31, r18
 622:	f9 7f       	andi	r31, 0xF9	; 249
 624:	bf 2e       	mov	r11, r31
 626:	8f 36       	cpi	r24, 0x6F	; 111
 628:	c1 f0       	breq	.+48     	; 0x65a <vfprintf+0x242>
 62a:	18 f4       	brcc	.+6      	; 0x632 <vfprintf+0x21a>
 62c:	88 35       	cpi	r24, 0x58	; 88
 62e:	79 f0       	breq	.+30     	; 0x64e <vfprintf+0x236>
 630:	ad c0       	rjmp	.+346    	; 0x78c <vfprintf+0x374>
 632:	80 37       	cpi	r24, 0x70	; 112
 634:	19 f0       	breq	.+6      	; 0x63c <vfprintf+0x224>
 636:	88 37       	cpi	r24, 0x78	; 120
 638:	21 f0       	breq	.+8      	; 0x642 <vfprintf+0x22a>
 63a:	a8 c0       	rjmp	.+336    	; 0x78c <vfprintf+0x374>
 63c:	2f 2f       	mov	r18, r31
 63e:	20 61       	ori	r18, 0x10	; 16
 640:	b2 2e       	mov	r11, r18
 642:	b4 fe       	sbrs	r11, 4
 644:	0d c0       	rjmp	.+26     	; 0x660 <vfprintf+0x248>
 646:	8b 2d       	mov	r24, r11
 648:	84 60       	ori	r24, 0x04	; 4
 64a:	b8 2e       	mov	r11, r24
 64c:	09 c0       	rjmp	.+18     	; 0x660 <vfprintf+0x248>
 64e:	24 ff       	sbrs	r18, 4
 650:	0a c0       	rjmp	.+20     	; 0x666 <vfprintf+0x24e>
 652:	9f 2f       	mov	r25, r31
 654:	96 60       	ori	r25, 0x06	; 6
 656:	b9 2e       	mov	r11, r25
 658:	06 c0       	rjmp	.+12     	; 0x666 <vfprintf+0x24e>
 65a:	28 e0       	ldi	r18, 0x08	; 8
 65c:	30 e0       	ldi	r19, 0x00	; 0
 65e:	05 c0       	rjmp	.+10     	; 0x66a <vfprintf+0x252>
 660:	20 e1       	ldi	r18, 0x10	; 16
 662:	30 e0       	ldi	r19, 0x00	; 0
 664:	02 c0       	rjmp	.+4      	; 0x66a <vfprintf+0x252>
 666:	20 e1       	ldi	r18, 0x10	; 16
 668:	32 e0       	ldi	r19, 0x02	; 2
 66a:	f8 01       	movw	r30, r16
 66c:	b7 fe       	sbrs	r11, 7
 66e:	07 c0       	rjmp	.+14     	; 0x67e <vfprintf+0x266>
 670:	60 81       	ld	r22, Z
 672:	71 81       	ldd	r23, Z+1	; 0x01
 674:	82 81       	ldd	r24, Z+2	; 0x02
 676:	93 81       	ldd	r25, Z+3	; 0x03
 678:	0c 5f       	subi	r16, 0xFC	; 252
 67a:	1f 4f       	sbci	r17, 0xFF	; 255
 67c:	06 c0       	rjmp	.+12     	; 0x68a <vfprintf+0x272>
 67e:	60 81       	ld	r22, Z
 680:	71 81       	ldd	r23, Z+1	; 0x01
 682:	80 e0       	ldi	r24, 0x00	; 0
 684:	90 e0       	ldi	r25, 0x00	; 0
 686:	0e 5f       	subi	r16, 0xFE	; 254
 688:	1f 4f       	sbci	r17, 0xFF	; 255
 68a:	a4 01       	movw	r20, r8
 68c:	d0 d0       	rcall	.+416    	; 0x82e <__ultoa_invert>
 68e:	a8 2e       	mov	r10, r24
 690:	a8 18       	sub	r10, r8
 692:	fb 2d       	mov	r31, r11
 694:	ff 77       	andi	r31, 0x7F	; 127
 696:	bf 2e       	mov	r11, r31
 698:	b6 fe       	sbrs	r11, 6
 69a:	0b c0       	rjmp	.+22     	; 0x6b2 <vfprintf+0x29a>
 69c:	2b 2d       	mov	r18, r11
 69e:	2e 7f       	andi	r18, 0xFE	; 254
 6a0:	a5 14       	cp	r10, r5
 6a2:	50 f4       	brcc	.+20     	; 0x6b8 <vfprintf+0x2a0>
 6a4:	b4 fe       	sbrs	r11, 4
 6a6:	0a c0       	rjmp	.+20     	; 0x6bc <vfprintf+0x2a4>
 6a8:	b2 fc       	sbrc	r11, 2
 6aa:	08 c0       	rjmp	.+16     	; 0x6bc <vfprintf+0x2a4>
 6ac:	2b 2d       	mov	r18, r11
 6ae:	2e 7e       	andi	r18, 0xEE	; 238
 6b0:	05 c0       	rjmp	.+10     	; 0x6bc <vfprintf+0x2a4>
 6b2:	7a 2c       	mov	r7, r10
 6b4:	2b 2d       	mov	r18, r11
 6b6:	03 c0       	rjmp	.+6      	; 0x6be <vfprintf+0x2a6>
 6b8:	7a 2c       	mov	r7, r10
 6ba:	01 c0       	rjmp	.+2      	; 0x6be <vfprintf+0x2a6>
 6bc:	75 2c       	mov	r7, r5
 6be:	24 ff       	sbrs	r18, 4
 6c0:	0d c0       	rjmp	.+26     	; 0x6dc <vfprintf+0x2c4>
 6c2:	fe 01       	movw	r30, r28
 6c4:	ea 0d       	add	r30, r10
 6c6:	f1 1d       	adc	r31, r1
 6c8:	80 81       	ld	r24, Z
 6ca:	80 33       	cpi	r24, 0x30	; 48
 6cc:	11 f4       	brne	.+4      	; 0x6d2 <vfprintf+0x2ba>
 6ce:	29 7e       	andi	r18, 0xE9	; 233
 6d0:	09 c0       	rjmp	.+18     	; 0x6e4 <vfprintf+0x2cc>
 6d2:	22 ff       	sbrs	r18, 2
 6d4:	06 c0       	rjmp	.+12     	; 0x6e2 <vfprintf+0x2ca>
 6d6:	73 94       	inc	r7
 6d8:	73 94       	inc	r7
 6da:	04 c0       	rjmp	.+8      	; 0x6e4 <vfprintf+0x2cc>
 6dc:	82 2f       	mov	r24, r18
 6de:	86 78       	andi	r24, 0x86	; 134
 6e0:	09 f0       	breq	.+2      	; 0x6e4 <vfprintf+0x2cc>
 6e2:	73 94       	inc	r7
 6e4:	23 fd       	sbrc	r18, 3
 6e6:	12 c0       	rjmp	.+36     	; 0x70c <vfprintf+0x2f4>
 6e8:	20 ff       	sbrs	r18, 0
 6ea:	06 c0       	rjmp	.+12     	; 0x6f8 <vfprintf+0x2e0>
 6ec:	5a 2c       	mov	r5, r10
 6ee:	73 14       	cp	r7, r3
 6f0:	18 f4       	brcc	.+6      	; 0x6f8 <vfprintf+0x2e0>
 6f2:	53 0c       	add	r5, r3
 6f4:	57 18       	sub	r5, r7
 6f6:	73 2c       	mov	r7, r3
 6f8:	73 14       	cp	r7, r3
 6fa:	60 f4       	brcc	.+24     	; 0x714 <vfprintf+0x2fc>
 6fc:	b7 01       	movw	r22, r14
 6fe:	80 e2       	ldi	r24, 0x20	; 32
 700:	90 e0       	ldi	r25, 0x00	; 0
 702:	2c 87       	std	Y+12, r18	; 0x0c
 704:	62 d0       	rcall	.+196    	; 0x7ca <fputc>
 706:	73 94       	inc	r7
 708:	2c 85       	ldd	r18, Y+12	; 0x0c
 70a:	f6 cf       	rjmp	.-20     	; 0x6f8 <vfprintf+0x2e0>
 70c:	73 14       	cp	r7, r3
 70e:	10 f4       	brcc	.+4      	; 0x714 <vfprintf+0x2fc>
 710:	37 18       	sub	r3, r7
 712:	01 c0       	rjmp	.+2      	; 0x716 <vfprintf+0x2fe>
 714:	31 2c       	mov	r3, r1
 716:	24 ff       	sbrs	r18, 4
 718:	11 c0       	rjmp	.+34     	; 0x73c <vfprintf+0x324>
 71a:	b7 01       	movw	r22, r14
 71c:	80 e3       	ldi	r24, 0x30	; 48
 71e:	90 e0       	ldi	r25, 0x00	; 0
 720:	2c 87       	std	Y+12, r18	; 0x0c
 722:	53 d0       	rcall	.+166    	; 0x7ca <fputc>
 724:	2c 85       	ldd	r18, Y+12	; 0x0c
 726:	22 ff       	sbrs	r18, 2
 728:	16 c0       	rjmp	.+44     	; 0x756 <vfprintf+0x33e>
 72a:	21 ff       	sbrs	r18, 1
 72c:	03 c0       	rjmp	.+6      	; 0x734 <vfprintf+0x31c>
 72e:	88 e5       	ldi	r24, 0x58	; 88
 730:	90 e0       	ldi	r25, 0x00	; 0
 732:	02 c0       	rjmp	.+4      	; 0x738 <vfprintf+0x320>
 734:	88 e7       	ldi	r24, 0x78	; 120
 736:	90 e0       	ldi	r25, 0x00	; 0
 738:	b7 01       	movw	r22, r14
 73a:	0c c0       	rjmp	.+24     	; 0x754 <vfprintf+0x33c>
 73c:	82 2f       	mov	r24, r18
 73e:	86 78       	andi	r24, 0x86	; 134
 740:	51 f0       	breq	.+20     	; 0x756 <vfprintf+0x33e>
 742:	21 fd       	sbrc	r18, 1
 744:	02 c0       	rjmp	.+4      	; 0x74a <vfprintf+0x332>
 746:	80 e2       	ldi	r24, 0x20	; 32
 748:	01 c0       	rjmp	.+2      	; 0x74c <vfprintf+0x334>
 74a:	8b e2       	ldi	r24, 0x2B	; 43
 74c:	27 fd       	sbrc	r18, 7
 74e:	8d e2       	ldi	r24, 0x2D	; 45
 750:	b7 01       	movw	r22, r14
 752:	90 e0       	ldi	r25, 0x00	; 0
 754:	3a d0       	rcall	.+116    	; 0x7ca <fputc>
 756:	a5 14       	cp	r10, r5
 758:	30 f4       	brcc	.+12     	; 0x766 <vfprintf+0x34e>
 75a:	b7 01       	movw	r22, r14
 75c:	80 e3       	ldi	r24, 0x30	; 48
 75e:	90 e0       	ldi	r25, 0x00	; 0
 760:	34 d0       	rcall	.+104    	; 0x7ca <fputc>
 762:	5a 94       	dec	r5
 764:	f8 cf       	rjmp	.-16     	; 0x756 <vfprintf+0x33e>
 766:	aa 94       	dec	r10
 768:	f4 01       	movw	r30, r8
 76a:	ea 0d       	add	r30, r10
 76c:	f1 1d       	adc	r31, r1
 76e:	80 81       	ld	r24, Z
 770:	b7 01       	movw	r22, r14
 772:	90 e0       	ldi	r25, 0x00	; 0
 774:	2a d0       	rcall	.+84     	; 0x7ca <fputc>
 776:	a1 10       	cpse	r10, r1
 778:	f6 cf       	rjmp	.-20     	; 0x766 <vfprintf+0x34e>
 77a:	33 20       	and	r3, r3
 77c:	09 f4       	brne	.+2      	; 0x780 <vfprintf+0x368>
 77e:	5d ce       	rjmp	.-838    	; 0x43a <vfprintf+0x22>
 780:	b7 01       	movw	r22, r14
 782:	80 e2       	ldi	r24, 0x20	; 32
 784:	90 e0       	ldi	r25, 0x00	; 0
 786:	21 d0       	rcall	.+66     	; 0x7ca <fputc>
 788:	3a 94       	dec	r3
 78a:	f7 cf       	rjmp	.-18     	; 0x77a <vfprintf+0x362>
 78c:	f7 01       	movw	r30, r14
 78e:	86 81       	ldd	r24, Z+6	; 0x06
 790:	97 81       	ldd	r25, Z+7	; 0x07
 792:	02 c0       	rjmp	.+4      	; 0x798 <vfprintf+0x380>
 794:	8f ef       	ldi	r24, 0xFF	; 255
 796:	9f ef       	ldi	r25, 0xFF	; 255
 798:	2c 96       	adiw	r28, 0x0c	; 12
 79a:	e2 e1       	ldi	r30, 0x12	; 18
 79c:	03 ce       	rjmp	.-1018   	; 0x3a4 <__epilogue_restores__>

0000079e <strnlen_P>:
 79e:	fc 01       	movw	r30, r24
 7a0:	05 90       	lpm	r0, Z+
 7a2:	61 50       	subi	r22, 0x01	; 1
 7a4:	70 40       	sbci	r23, 0x00	; 0
 7a6:	01 10       	cpse	r0, r1
 7a8:	d8 f7       	brcc	.-10     	; 0x7a0 <strnlen_P+0x2>
 7aa:	80 95       	com	r24
 7ac:	90 95       	com	r25
 7ae:	8e 0f       	add	r24, r30
 7b0:	9f 1f       	adc	r25, r31
 7b2:	08 95       	ret

000007b4 <strnlen>:
 7b4:	fc 01       	movw	r30, r24
 7b6:	61 50       	subi	r22, 0x01	; 1
 7b8:	70 40       	sbci	r23, 0x00	; 0
 7ba:	01 90       	ld	r0, Z+
 7bc:	01 10       	cpse	r0, r1
 7be:	d8 f7       	brcc	.-10     	; 0x7b6 <strnlen+0x2>
 7c0:	80 95       	com	r24
 7c2:	90 95       	com	r25
 7c4:	8e 0f       	add	r24, r30
 7c6:	9f 1f       	adc	r25, r31
 7c8:	08 95       	ret

000007ca <fputc>:
 7ca:	0f 93       	push	r16
 7cc:	1f 93       	push	r17
 7ce:	cf 93       	push	r28
 7d0:	df 93       	push	r29
 7d2:	18 2f       	mov	r17, r24
 7d4:	09 2f       	mov	r16, r25
 7d6:	eb 01       	movw	r28, r22
 7d8:	8b 81       	ldd	r24, Y+3	; 0x03
 7da:	81 fd       	sbrc	r24, 1
 7dc:	03 c0       	rjmp	.+6      	; 0x7e4 <fputc+0x1a>
 7de:	8f ef       	ldi	r24, 0xFF	; 255
 7e0:	9f ef       	ldi	r25, 0xFF	; 255
 7e2:	20 c0       	rjmp	.+64     	; 0x824 <fputc+0x5a>
 7e4:	82 ff       	sbrs	r24, 2
 7e6:	10 c0       	rjmp	.+32     	; 0x808 <fputc+0x3e>
 7e8:	4e 81       	ldd	r20, Y+6	; 0x06
 7ea:	5f 81       	ldd	r21, Y+7	; 0x07
 7ec:	2c 81       	ldd	r18, Y+4	; 0x04
 7ee:	3d 81       	ldd	r19, Y+5	; 0x05
 7f0:	42 17       	cp	r20, r18
 7f2:	53 07       	cpc	r21, r19
 7f4:	7c f4       	brge	.+30     	; 0x814 <fputc+0x4a>
 7f6:	e8 81       	ld	r30, Y
 7f8:	f9 81       	ldd	r31, Y+1	; 0x01
 7fa:	9f 01       	movw	r18, r30
 7fc:	2f 5f       	subi	r18, 0xFF	; 255
 7fe:	3f 4f       	sbci	r19, 0xFF	; 255
 800:	39 83       	std	Y+1, r19	; 0x01
 802:	28 83       	st	Y, r18
 804:	10 83       	st	Z, r17
 806:	06 c0       	rjmp	.+12     	; 0x814 <fputc+0x4a>
 808:	e8 85       	ldd	r30, Y+8	; 0x08
 80a:	f9 85       	ldd	r31, Y+9	; 0x09
 80c:	81 2f       	mov	r24, r17
 80e:	09 95       	icall
 810:	89 2b       	or	r24, r25
 812:	29 f7       	brne	.-54     	; 0x7de <fputc+0x14>
 814:	2e 81       	ldd	r18, Y+6	; 0x06
 816:	3f 81       	ldd	r19, Y+7	; 0x07
 818:	2f 5f       	subi	r18, 0xFF	; 255
 81a:	3f 4f       	sbci	r19, 0xFF	; 255
 81c:	3f 83       	std	Y+7, r19	; 0x07
 81e:	2e 83       	std	Y+6, r18	; 0x06
 820:	81 2f       	mov	r24, r17
 822:	90 2f       	mov	r25, r16
 824:	df 91       	pop	r29
 826:	cf 91       	pop	r28
 828:	1f 91       	pop	r17
 82a:	0f 91       	pop	r16
 82c:	08 95       	ret

0000082e <__ultoa_invert>:
 82e:	fa 01       	movw	r30, r20
 830:	aa 27       	eor	r26, r26
 832:	28 30       	cpi	r18, 0x08	; 8
 834:	61 f1       	breq	.+88     	; 0x88e <__ultoa_invert+0x60>
 836:	20 31       	cpi	r18, 0x10	; 16
 838:	91 f1       	breq	.+100    	; 0x89e <__ultoa_invert+0x70>
 83a:	e8 94       	clt
 83c:	6f 93       	push	r22
 83e:	6e 7f       	andi	r22, 0xFE	; 254
 840:	6e 5f       	subi	r22, 0xFE	; 254
 842:	7f 4f       	sbci	r23, 0xFF	; 255
 844:	8f 4f       	sbci	r24, 0xFF	; 255
 846:	9f 4f       	sbci	r25, 0xFF	; 255
 848:	af 4f       	sbci	r26, 0xFF	; 255
 84a:	b1 e0       	ldi	r27, 0x01	; 1
 84c:	40 d0       	rcall	.+128    	; 0x8ce <__ultoa_invert+0xa0>
 84e:	b4 e0       	ldi	r27, 0x04	; 4
 850:	3e d0       	rcall	.+124    	; 0x8ce <__ultoa_invert+0xa0>
 852:	67 0f       	add	r22, r23
 854:	78 1f       	adc	r23, r24
 856:	89 1f       	adc	r24, r25
 858:	9a 1f       	adc	r25, r26
 85a:	a1 1d       	adc	r26, r1
 85c:	68 0f       	add	r22, r24
 85e:	79 1f       	adc	r23, r25
 860:	8a 1f       	adc	r24, r26
 862:	91 1d       	adc	r25, r1
 864:	a1 1d       	adc	r26, r1
 866:	6a 0f       	add	r22, r26
 868:	71 1d       	adc	r23, r1
 86a:	81 1d       	adc	r24, r1
 86c:	91 1d       	adc	r25, r1
 86e:	a1 1d       	adc	r26, r1
 870:	22 d0       	rcall	.+68     	; 0x8b6 <__ultoa_invert+0x88>
 872:	09 f4       	brne	.+2      	; 0x876 <__ultoa_invert+0x48>
 874:	68 94       	set
 876:	3f 91       	pop	r19
 878:	06 2e       	mov	r0, r22
 87a:	00 0c       	add	r0, r0
 87c:	30 19       	sub	r19, r0
 87e:	00 0c       	add	r0, r0
 880:	00 0c       	add	r0, r0
 882:	30 19       	sub	r19, r0
 884:	30 5d       	subi	r19, 0xD0	; 208
 886:	31 93       	st	Z+, r19
 888:	ce f6       	brtc	.-78     	; 0x83c <__ultoa_invert+0xe>
 88a:	cf 01       	movw	r24, r30
 88c:	08 95       	ret
 88e:	46 2f       	mov	r20, r22
 890:	47 70       	andi	r20, 0x07	; 7
 892:	40 5d       	subi	r20, 0xD0	; 208
 894:	41 93       	st	Z+, r20
 896:	b3 e0       	ldi	r27, 0x03	; 3
 898:	0f d0       	rcall	.+30     	; 0x8b8 <__ultoa_invert+0x8a>
 89a:	c9 f7       	brne	.-14     	; 0x88e <__ultoa_invert+0x60>
 89c:	f6 cf       	rjmp	.-20     	; 0x88a <__ultoa_invert+0x5c>
 89e:	46 2f       	mov	r20, r22
 8a0:	4f 70       	andi	r20, 0x0F	; 15
 8a2:	40 5d       	subi	r20, 0xD0	; 208
 8a4:	4a 33       	cpi	r20, 0x3A	; 58
 8a6:	18 f0       	brcs	.+6      	; 0x8ae <__ultoa_invert+0x80>
 8a8:	49 5d       	subi	r20, 0xD9	; 217
 8aa:	31 fd       	sbrc	r19, 1
 8ac:	40 52       	subi	r20, 0x20	; 32
 8ae:	41 93       	st	Z+, r20
 8b0:	02 d0       	rcall	.+4      	; 0x8b6 <__ultoa_invert+0x88>
 8b2:	a9 f7       	brne	.-22     	; 0x89e <__ultoa_invert+0x70>
 8b4:	ea cf       	rjmp	.-44     	; 0x88a <__ultoa_invert+0x5c>
 8b6:	b4 e0       	ldi	r27, 0x04	; 4
 8b8:	a6 95       	lsr	r26
 8ba:	97 95       	ror	r25
 8bc:	87 95       	ror	r24
 8be:	77 95       	ror	r23
 8c0:	67 95       	ror	r22
 8c2:	ba 95       	dec	r27
 8c4:	c9 f7       	brne	.-14     	; 0x8b8 <__ultoa_invert+0x8a>
 8c6:	00 97       	sbiw	r24, 0x00	; 0
 8c8:	61 05       	cpc	r22, r1
 8ca:	71 05       	cpc	r23, r1
 8cc:	08 95       	ret
 8ce:	9b 01       	movw	r18, r22
 8d0:	ac 01       	movw	r20, r24
 8d2:	0a 2e       	mov	r0, r26
 8d4:	06 94       	lsr	r0
 8d6:	57 95       	ror	r21
 8d8:	47 95       	ror	r20
 8da:	37 95       	ror	r19
 8dc:	27 95       	ror	r18
 8de:	ba 95       	dec	r27
 8e0:	c9 f7       	brne	.-14     	; 0x8d4 <__ultoa_invert+0xa6>
 8e2:	62 0f       	add	r22, r18
 8e4:	73 1f       	adc	r23, r19
 8e6:	84 1f       	adc	r24, r20
 8e8:	95 1f       	adc	r25, r21
 8ea:	a0 1d       	adc	r26, r0
 8ec:	08 95       	ret

000008ee <__mulqi3>:
 8ee:	00 24       	eor	r0, r0

000008f0 <__mulqi3_loop>:
 8f0:	80 fd       	sbrc	r24, 0
 8f2:	06 0e       	add	r0, r22
 8f4:	66 0f       	add	r22, r22
 8f6:	11 f0       	breq	.+4      	; 0x8fc <__mulqi3_exit>
 8f8:	86 95       	lsr	r24
 8fa:	d1 f7       	brne	.-12     	; 0x8f0 <__mulqi3_loop>

000008fc <__mulqi3_exit>:
 8fc:	80 2d       	mov	r24, r0
 8fe:	08 95       	ret

00000900 <_exit>:
 900:	f8 94       	cli

00000902 <__stop_program>:
 902:	ff cf       	rjmp	.-2      	; 0x902 <__stop_program>
