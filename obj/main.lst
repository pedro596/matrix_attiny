
obj/main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000091c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000022  00800060  0000091c  000009b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000003d  00800082  00800082  000009d2  2**0
                  ALLOC
  3 .stab         00002dd8  00000000  00000000  000009d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001acd  00000000  00000000  000037ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00005279  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000020  00000000  00000000  00005290  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000005b  00000000  00000000  000052b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000014  00000000  00000000  0000530b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000059  00000000  00000000  0000531f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
   6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	16 c1       	rjmp	.+556    	; 0x242 <__vector_10>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_copy_data>:
  2a:	10 e0       	ldi	r17, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	ec e1       	ldi	r30, 0x1C	; 28
  32:	f9 e0       	ldi	r31, 0x09	; 9
  34:	02 c0       	rjmp	.+4      	; 0x3a <__do_copy_data+0x10>
  36:	05 90       	lpm	r0, Z+
  38:	0d 92       	st	X+, r0
  3a:	a2 38       	cpi	r26, 0x82	; 130
  3c:	b1 07       	cpc	r27, r17
  3e:	d9 f7       	brne	.-10     	; 0x36 <__do_copy_data+0xc>

00000040 <__do_clear_bss>:
  40:	10 e0       	ldi	r17, 0x00	; 0
  42:	a2 e8       	ldi	r26, 0x82	; 130
  44:	b0 e0       	ldi	r27, 0x00	; 0
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	af 3b       	cpi	r26, 0xBF	; 191
  4c:	b1 07       	cpc	r27, r17
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	93 d0       	rcall	.+294    	; 0x178 <main>
  52:	62 c4       	rjmp	.+2244   	; 0x918 <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <TxTimedByte>:
.global TxTimedByte
; transmit byte in r24 with bit delay in r22 - 15 instructions
; calling code must set Tx line to idle state (high) or 1st byte may be lost
; i.e. PORTB |= (1<<UART_Tx)
TxTimedByte:
	cli
  56:	f8 94       	cli
        sbi UART_Port-1, UART_Tx        ; set Tx line to output
  58:	b9 9a       	sbi	0x17, 1	; 23
        cbi UART_Port, UART_Tx          ; start bit
  5a:	c1 98       	cbi	0x18, 1	; 24
	in r0, UART_Port
  5c:	08 b2       	in	r0, 0x18	; 24
	ldi r25, 3                      ; stop bit + idle state
  5e:	93 e0       	ldi	r25, 0x03	; 3

00000060 <TxLoop>:
TxLoop:
        ; 8 cycle loop + delay - total = 7 + 3*r22
	mov delayCount, r22
  60:	26 2f       	mov	r18, r22

00000062 <TxDelay>:
TxDelay:
; delay (3 cycle * delayCount) -1
        dec delayCount
  62:	2a 95       	dec	r18
        brne TxDelay
  64:	f1 f7       	brne	.-4      	; 0x62 <TxDelay>
	bst r24, 0			; store lsb in T
  66:	80 fb       	bst	r24, 0
	bld r0, UART_Tx
  68:	01 f8       	bld	r0, 1
	lsr r25
  6a:	96 95       	lsr	r25
	ror r24
  6c:	87 95       	ror	r24
	out UART_Port, r0
  6e:	08 ba       	out	0x18, r0	; 24
        brne TxLoop
  70:	b9 f7       	brne	.-18     	; 0x60 <TxLoop>
	reti				; return and enable interrupts
  72:	18 95       	reti

00000074 <RxTimedByte>:


.global RxTimedByte
; receive byte into r24 with bit delay in r22 & R24 - 16 instructions
RxTimedByte:
        cbi UART_Port-1, UART_Rx  	; set Rx line to input
  74:	b9 98       	cbi	0x17, 1	; 23
#ifdef RX_PULLUP
        sbi UART_Port, UART_Rx  	; enable pullup
#endif
	mov delayCount, r24		; 1.5 bit delay
  76:	28 2f       	mov	r18, r24
	ldi r24, 0x80 			; bit shift counter
  78:	80 e8       	ldi	r24, 0x80	; 128

0000007a <WaitStart>:
WaitStart:
	sbic UART_Port-2, UART_Rx 	; wait for start edge
  7a:	b1 99       	sbic	0x16, 1	; 22
	rjmp WaitStart
  7c:	fe cf       	rjmp	.-4      	; 0x7a <WaitStart>
	cli
  7e:	f8 94       	cli

00000080 <RxBit>:
RxBit:
        ; 6 cycle loop + delay - total = 5 + 3*r22
; delay (3 cycle * delayCount) -1 and clear carry with subi
        subi delayCount, 1
  80:	21 50       	subi	r18, 0x01	; 1
        brne RxBit
  82:	f1 f7       	brne	.-4      	; 0x80 <RxBit>
	mov delayCount, r22
  84:	26 2f       	mov	r18, r22
	sbic UART_Port-2, UART_Rx	; check UART PIN
  86:	b1 99       	sbic	0x16, 1	; 22
	sec
  88:	08 94       	sec
	ror r24
  8a:	87 95       	ror	r24
	brcc RxBit
  8c:	c8 f7       	brcc	.-14     	; 0x80 <RxBit>

0000008e <StopBit>:
StopBit:
        dec delayCount
  8e:	2a 95       	dec	r18
        brne StopBit
  90:	f1 f7       	brne	.-4      	; 0x8e <StopBit>
	reti				; return and enable interrupts
  92:	18 95       	reti

00000094 <JoinData_out>:
	  |
*/

uint32_t JoinData_out(uint8_t on_off, uint8_t r, uint8_t g , uint8_t b)
// adaptar dados para o hardware
{
  94:	ef 92       	push	r14
  96:	ff 92       	push	r15
  98:	0f 93       	push	r16
  9a:	1f 93       	push	r17
  9c:	cf 93       	push	r28
  9e:	df 93       	push	r29
  a0:	e8 2e       	mov	r14, r24
  a2:	f6 2e       	mov	r15, r22
  a4:	e0 e0       	ldi	r30, 0x00	; 0
  a6:	f0 e0       	ldi	r31, 0x00	; 0
	uint32_t data;
	uint8_t onoff_verde=0, verde_onoff=0;
	uint8_t i, g_temp=0;
  a8:	30 e0       	ldi	r19, 0x00	; 0
	
	/*inverter o verde (reverse)*/
	for(i=0;i<8;i++)
		g_temp |= ((g>>i)&1)<<(7-i);
  aa:	50 e0       	ldi	r21, 0x00	; 0
  ac:	07 e0       	ldi	r16, 0x07	; 7
  ae:	10 e0       	ldi	r17, 0x00	; 0
  b0:	da 01       	movw	r26, r20
  b2:	0e 2e       	mov	r0, r30
  b4:	02 c0       	rjmp	.+4      	; 0xba <JoinData_out+0x26>
  b6:	b5 95       	asr	r27
  b8:	a7 95       	ror	r26
  ba:	0a 94       	dec	r0
  bc:	e2 f7       	brpl	.-8      	; 0xb6 <JoinData_out+0x22>
  be:	a1 70       	andi	r26, 0x01	; 1
  c0:	bb 27       	eor	r27, r27
  c2:	e8 01       	movw	r28, r16
  c4:	ce 1b       	sub	r28, r30
  c6:	df 0b       	sbc	r29, r31
  c8:	0c 2e       	mov	r0, r28
  ca:	01 c0       	rjmp	.+2      	; 0xce <JoinData_out+0x3a>
  cc:	aa 0f       	add	r26, r26
  ce:	0a 94       	dec	r0
  d0:	ea f7       	brpl	.-6      	; 0xcc <JoinData_out+0x38>
  d2:	3a 2b       	or	r19, r26
  d4:	31 96       	adiw	r30, 0x01	; 1
	uint32_t data;
	uint8_t onoff_verde=0, verde_onoff=0;
	uint8_t i, g_temp=0;
	
	/*inverter o verde (reverse)*/
	for(i=0;i<8;i++)
  d6:	e8 30       	cpi	r30, 0x08	; 8
  d8:	f1 05       	cpc	r31, r1
  da:	51 f7       	brne	.-44     	; 0xb0 <JoinData_out+0x1c>
		g_temp |= ((g>>i)&1)<<(7-i);
	

	//another cosmetics because the stupid rgm matrix pinout's...
	
	g = (g_temp>>4) | (g_temp<<4); 
  dc:	32 95       	swap	r19

	/*dividir (e juntar) bytes (verde e onoff)*/
	onoff_verde  = (on_off&0xf0)|(g&0x0f);
  de:	63 2f       	mov	r22, r19
  e0:	6f 70       	andi	r22, 0x0F	; 15
  e2:	8e 2d       	mov	r24, r14
  e4:	80 7f       	andi	r24, 0xF0	; 240
  e6:	68 2b       	or	r22, r24
	verde_onoff  = (on_off&0x0f)|(g&0xf0);


	data = (uint32_t)(onoff_verde);				//[7:5] On/off 3º  [4:0] verde 2º invertido -> ncessário compensar
  e8:	86 2f       	mov	r24, r22
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	a0 e0       	ldi	r26, 0x00	; 0
  ee:	b0 e0       	ldi	r27, 0x00	; 0
	data = (uint32_t)(data<<8)|verde_onoff; 	//[7:5] Verde 1º invertido  [4:0] on/off 4º
  f0:	ba 2f       	mov	r27, r26
  f2:	a9 2f       	mov	r26, r25
  f4:	98 2f       	mov	r25, r24
  f6:	88 27       	eor	r24, r24
	
	g = (g_temp>>4) | (g_temp<<4); 

	/*dividir (e juntar) bytes (verde e onoff)*/
	onoff_verde  = (on_off&0xf0)|(g&0x0f);
	verde_onoff  = (on_off&0x0f)|(g&0xf0);
  f8:	30 7f       	andi	r19, 0xF0	; 240
  fa:	4e 2d       	mov	r20, r14
  fc:	4f 70       	andi	r20, 0x0F	; 15
  fe:	34 2b       	or	r19, r20


	data = (uint32_t)(onoff_verde);				//[7:5] On/off 3º  [4:0] verde 2º invertido -> ncessário compensar
	data = (uint32_t)(data<<8)|verde_onoff; 	//[7:5] Verde 1º invertido  [4:0] on/off 4º
 100:	83 2b       	or	r24, r19
	data = (uint32_t)(data<<8)|b;			//Azul 
 102:	ba 2f       	mov	r27, r26
 104:	a9 2f       	mov	r26, r25
 106:	98 2f       	mov	r25, r24
 108:	88 27       	eor	r24, r24
 10a:	82 2b       	or	r24, r18
	data = (uint32_t)(data<<8)|r;				//Vermelho
 10c:	66 27       	eor	r22, r22
 10e:	78 2f       	mov	r23, r24
 110:	89 2f       	mov	r24, r25
 112:	9a 2f       	mov	r25, r26
 114:	6f 29       	or	r22, r15

	return data;
}
 116:	cd b7       	in	r28, 0x3d	; 61
 118:	de b7       	in	r29, 0x3e	; 62
 11a:	e6 e0       	ldi	r30, 0x06	; 6
 11c:	5b c1       	rjmp	.+694    	; 0x3d4 <__epilogue_restores__+0x18>

0000011e <shift>:
}



void shift(uint32_t data)
{
 11e:	0f 93       	push	r16
 120:	1f 93       	push	r17
	uint8_t i,temp;

	_low(LATCH_CK);
 122:	c3 98       	cbi	0x18, 3	; 24
	_low(SHIFT_CK);
 124:	c0 98       	cbi	0x18, 0	; 24
 126:	40 e0       	ldi	r20, 0x00	; 0
 128:	50 e0       	ldi	r21, 0x00	; 0

	for(i=0; i<32; i++){
		
		_low(SHIFT_CK);
 12a:	c0 98       	cbi	0x18, 0	; 24

		if((data>>i)&(0x1))
 12c:	8b 01       	movw	r16, r22
 12e:	9c 01       	movw	r18, r24
 130:	04 2e       	mov	r0, r20
 132:	04 c0       	rjmp	.+8      	; 0x13c <shift+0x1e>
 134:	36 95       	lsr	r19
 136:	27 95       	ror	r18
 138:	17 95       	ror	r17
 13a:	07 95       	ror	r16
 13c:	0a 94       	dec	r0
 13e:	d2 f7       	brpl	.-12     	; 0x134 <shift+0x16>
 140:	00 ff       	sbrs	r16, 0
 142:	02 c0       	rjmp	.+4      	; 0x148 <shift+0x2a>
			_high(DATA_0);
 144:	c4 9a       	sbi	0x18, 4	; 24
 146:	01 c0       	rjmp	.+2      	; 0x14a <shift+0x2c>
		else
			_low(DATA_0);
 148:	c4 98       	cbi	0x18, 4	; 24

		_high(SHIFT_CK);
 14a:	c0 9a       	sbi	0x18, 0	; 24
 14c:	4f 5f       	subi	r20, 0xFF	; 255
 14e:	5f 4f       	sbci	r21, 0xFF	; 255
	uint8_t i,temp;

	_low(LATCH_CK);
	_low(SHIFT_CK);

	for(i=0; i<32; i++){
 150:	40 32       	cpi	r20, 0x20	; 32
 152:	51 05       	cpc	r21, r1
 154:	51 f7       	brne	.-44     	; 0x12a <shift+0xc>
			_low(DATA_0);

		_high(SHIFT_CK);
	}
	
	_high(LATCH_CK);
 156:	c3 9a       	sbi	0x18, 3	; 24
	_low(LATCH_CK);
 158:	c3 98       	cbi	0x18, 3	; 24
}
 15a:	1f 91       	pop	r17
 15c:	0f 91       	pop	r16
 15e:	08 95       	ret

00000160 <serOut>:

	sei();
}

void serOut(const char* str)		/**/
{
 160:	cf 93       	push	r28
 162:	df 93       	push	r29
 164:	ec 01       	movw	r28, r24
   while (*str) TxByte (*str++);
 166:	89 91       	ld	r24, Y+
 168:	88 23       	and	r24, r24
 16a:	19 f0       	breq	.+6      	; 0x172 <serOut+0x12>
 16c:	65 e1       	ldi	r22, 0x15	; 21
 16e:	73 df       	rcall	.-282    	; 0x56 <TxTimedByte>
 170:	fa cf       	rjmp	.-12     	; 0x166 <serOut+0x6>
}
 172:	df 91       	pop	r29
 174:	cf 91       	pop	r28
 176:	08 95       	ret

00000178 <main>:
	CLKPR = 0b10000000;
	CLKPR = 0b00000000;
}

int main()
{
 178:	a0 e0       	ldi	r26, 0x00	; 0
 17a:	b0 e0       	ldi	r27, 0x00	; 0
 17c:	e1 ec       	ldi	r30, 0xC1	; 193
 17e:	f0 e0       	ldi	r31, 0x00	; 0
 180:	0c c1       	rjmp	.+536    	; 0x39a <__prologue_saves__+0x16>



inline void Set8Mhz()
{
	CLKPR = 0b10000000;
 182:	80 e8       	ldi	r24, 0x80	; 128
 184:	86 bd       	out	0x26, r24	; 38
	CLKPR = 0b00000000;
 186:	16 bc       	out	0x26, r1	; 38

inline void HdInit()
{
	/* Configure  my "soft-step" timer for the app */
	/* 0.5ms shoud be ok  4000 clock operations between ticks  */ 
	TCCR0A |= (1<<WGM01);
 188:	8a b5       	in	r24, 0x2a	; 42
 18a:	82 60       	ori	r24, 0x02	; 2
 18c:	8a bd       	out	0x2a, r24	; 42
	TCCR0B |= (1<<CS01);
 18e:	83 b7       	in	r24, 0x33	; 51
 190:	82 60       	ori	r24, 0x02	; 2
 192:	83 bf       	out	0x33, r24	; 51
	OCR0A = 249;
 194:	89 ef       	ldi	r24, 0xF9	; 249
 196:	89 bd       	out	0x29, r24	; 41
	TIMSK |= (1<<OCIE0A);
 198:	89 b7       	in	r24, 0x39	; 57
 19a:	80 61       	ori	r24, 0x10	; 16
 19c:	89 bf       	out	0x39, r24	; 57

	/*set outputs*/
	DDRB |= (1<<BLINK) |(1<<LATCH_CK)|(1<<SHIFT_CK)|(1<<DATA_0);
 19e:	87 b3       	in	r24, 0x17	; 23
 1a0:	89 61       	ori	r24, 0x19	; 25
 1a2:	87 bb       	out	0x17, r24	; 23

	sei();
 1a4:	78 94       	sei
}

int main()
{
	Set8Mhz();
	uint8_t request_count=0;
 1a6:	d1 2c       	mov	r13, r1
	for(;;)
	{   
	    if(flag_comm>0){
			
		    TIMSK &= ~(1<<OCIE0A);						//desliga interrupção timer
		    sprintf(text, "-%d%d-\n\r", request_count/8, request_count%8);
 1a8:	08 e7       	ldi	r16, 0x78	; 120
 1aa:	10 e0       	ldi	r17, 0x00	; 0
 1ac:	88 e8       	ldi	r24, 0x88	; 136
 1ae:	e8 2e       	mov	r14, r24
 1b0:	80 e0       	ldi	r24, 0x00	; 0
 1b2:	f8 2e       	mov	r15, r24
	HdInit();	


	for(;;)
	{   
	    if(flag_comm>0){
 1b4:	80 91 82 00 	lds	r24, 0x0082
 1b8:	88 23       	and	r24, r24
 1ba:	e1 f3       	breq	.-8      	; 0x1b4 <main+0x3c>
			
		    TIMSK &= ~(1<<OCIE0A);						//desliga interrupção timer
 1bc:	89 b7       	in	r24, 0x39	; 57
 1be:	8f 7e       	andi	r24, 0xEF	; 239
 1c0:	89 bf       	out	0x39, r24	; 57
		    sprintf(text, "-%d%d-\n\r", request_count/8, request_count%8);
 1c2:	8d 2d       	mov	r24, r13
 1c4:	87 70       	andi	r24, 0x07	; 7
 1c6:	c8 2f       	mov	r28, r24
 1c8:	d0 e0       	ldi	r29, 0x00	; 0
 1ca:	1f 92       	push	r1
 1cc:	8f 93       	push	r24
 1ce:	1f 92       	push	r1
 1d0:	8d 2d       	mov	r24, r13
 1d2:	86 95       	lsr	r24
 1d4:	86 95       	lsr	r24
 1d6:	86 95       	lsr	r24
 1d8:	8f 93       	push	r24
 1da:	1f 93       	push	r17
 1dc:	0f 93       	push	r16
 1de:	ff 92       	push	r15
 1e0:	ef 92       	push	r14
 1e2:	07 d1       	rcall	.+526    	; 0x3f2 <sprintf>
		    serOut(text);
 1e4:	88 e8       	ldi	r24, 0x88	; 136
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	bb df       	rcall	.-138    	; 0x160 <serOut>
		    
		    if(request_count<8)
 1ea:	8d b7       	in	r24, 0x3d	; 61
 1ec:	9e b7       	in	r25, 0x3e	; 62
 1ee:	08 96       	adiw	r24, 0x08	; 8
 1f0:	0f b6       	in	r0, 0x3f	; 63
 1f2:	f8 94       	cli
 1f4:	9e bf       	out	0x3e, r25	; 62
 1f6:	0f be       	out	0x3f, r0	; 63
 1f8:	8d bf       	out	0x3d, r24	; 61
 1fa:	97 e0       	ldi	r25, 0x07	; 7
 1fc:	9d 15       	cp	r25, r13
 1fe:	30 f0       	brcs	.+12     	; 0x20c <main+0x94>
		    	red[request_count%8] = RxByte(); 	
 200:	65 e1       	ldi	r22, 0x15	; 21
 202:	8e e1       	ldi	r24, 0x1E	; 30
 204:	37 df       	rcall	.-402    	; 0x74 <RxTimedByte>
 206:	c0 59       	subi	r28, 0x90	; 144
 208:	df 4f       	sbci	r29, 0xFF	; 255
 20a:	08 c0       	rjmp	.+16     	; 0x21c <main+0xa4>
		    else if(request_count<16)
 20c:	8f e0       	ldi	r24, 0x0F	; 15
		    	green[request_count%8] = RxByte();
 20e:	65 e1       	ldi	r22, 0x15	; 21
		    sprintf(text, "-%d%d-\n\r", request_count/8, request_count%8);
		    serOut(text);
		    
		    if(request_count<8)
		    	red[request_count%8] = RxByte(); 	
		    else if(request_count<16)
 210:	8d 15       	cp	r24, r13
 212:	30 f0       	brcs	.+12     	; 0x220 <main+0xa8>
		    	green[request_count%8] = RxByte();
 214:	8e e1       	ldi	r24, 0x1E	; 30
 216:	2e df       	rcall	.-420    	; 0x74 <RxTimedByte>
 218:	c8 59       	subi	r28, 0x98	; 152
 21a:	df 4f       	sbci	r29, 0xFF	; 255
 21c:	88 83       	st	Y, r24
 21e:	08 c0       	rjmp	.+16     	; 0x230 <main+0xb8>
		    else
		    	blue[request_count%8] = RxByte();
 220:	8e e1       	ldi	r24, 0x1E	; 30
 222:	28 df       	rcall	.-432    	; 0x74 <RxTimedByte>
 224:	c0 5a       	subi	r28, 0xA0	; 160
 226:	df 4f       	sbci	r29, 0xFF	; 255
 228:	88 83       	st	Y, r24

   			if(request_count>22)
 22a:	96 e1       	ldi	r25, 0x16	; 22
 22c:	9d 15       	cp	r25, r13
 22e:	10 f0       	brcs	.+4      	; 0x234 <main+0xbc>
		    	request_count=0;
		    else
		    	request_count++;
 230:	d3 94       	inc	r13
 232:	01 c0       	rjmp	.+2      	; 0x236 <main+0xbe>
		    	green[request_count%8] = RxByte();
		    else
		    	blue[request_count%8] = RxByte();

   			if(request_count>22)
		    	request_count=0;
 234:	d1 2c       	mov	r13, r1
		    else
		    	request_count++;
   			
       		TIMSK |= (1<<OCIE0A);						//liga interrupções timer					
 236:	89 b7       	in	r24, 0x39	; 57
 238:	80 61       	ori	r24, 0x10	; 16
 23a:	89 bf       	out	0x39, r24	; 57
       		flag_comm =0;
 23c:	10 92 82 00 	sts	0x0082, r1
 240:	b9 cf       	rjmp	.-142    	; 0x1b4 <main+0x3c>

00000242 <__vector_10>:
    }
   		
}


ISR(TIMER0_COMPA_vect){
 242:	1f 92       	push	r1
 244:	0f 92       	push	r0
 246:	0f b6       	in	r0, 0x3f	; 63
 248:	0f 92       	push	r0
 24a:	11 24       	eor	r1, r1
 24c:	2f 93       	push	r18
 24e:	3f 93       	push	r19
 250:	4f 93       	push	r20
 252:	5f 93       	push	r21
 254:	6f 93       	push	r22
 256:	7f 93       	push	r23
 258:	8f 93       	push	r24
 25a:	9f 93       	push	r25
 25c:	af 93       	push	r26
 25e:	bf 93       	push	r27
 260:	ef 93       	push	r30
 262:	ff 93       	push	r31


	timer++;
 264:	80 91 87 00 	lds	r24, 0x0087
 268:	8f 5f       	subi	r24, 0xFF	; 255
 26a:	80 93 87 00 	sts	0x0087, r24
	linha++;
 26e:	80 91 86 00 	lds	r24, 0x0086
 272:	8f 5f       	subi	r24, 0xFF	; 255
 274:	80 93 86 00 	sts	0x0086, r24
	change_letter++;
 278:	80 91 84 00 	lds	r24, 0x0084
 27c:	90 91 85 00 	lds	r25, 0x0085
 280:	01 96       	adiw	r24, 0x01	; 1
 282:	90 93 85 00 	sts	0x0085, r25
 286:	80 93 84 00 	sts	0x0084, r24

	if(change_letter>5000)
 28a:	80 91 84 00 	lds	r24, 0x0084
 28e:	90 91 85 00 	lds	r25, 0x0085
 292:	89 38       	cpi	r24, 0x89	; 137
 294:	93 41       	sbci	r25, 0x13	; 19
 296:	78 f0       	brcs	.+30     	; 0x2b6 <__stack+0x57>
	{
		letter_number++;
 298:	80 91 83 00 	lds	r24, 0x0083
 29c:	8f 5f       	subi	r24, 0xFF	; 255
 29e:	80 93 83 00 	sts	0x0083, r24
		if(letter_number>20)
 2a2:	80 91 83 00 	lds	r24, 0x0083
 2a6:	85 31       	cpi	r24, 0x15	; 21
 2a8:	10 f0       	brcs	.+4      	; 0x2ae <__stack+0x4f>
			letter_number=0;
 2aa:	10 92 83 00 	sts	0x0083, r1

		change_letter=0;
 2ae:	10 92 85 00 	sts	0x0085, r1
 2b2:	10 92 84 00 	sts	0x0084, r1
	}



	if(timer>23)		//12 ms 
 2b6:	80 91 87 00 	lds	r24, 0x0087
 2ba:	88 31       	cpi	r24, 0x18	; 24
 2bc:	10 f0       	brcs	.+4      	; 0x2c2 <__stack+0x63>
		timer = 0;
 2be:	10 92 87 00 	sts	0x0087, r1
	
	if(linha>7)
 2c2:	80 91 86 00 	lds	r24, 0x0086
 2c6:	88 30       	cpi	r24, 0x08	; 8
 2c8:	10 f0       	brcs	.+4      	; 0x2ce <__stack+0x6f>
		linha = 0;
 2ca:	10 92 86 00 	sts	0x0086, r1
	
	if(timer<7)
 2ce:	80 91 87 00 	lds	r24, 0x0087
 2d2:	87 30       	cpi	r24, 0x07	; 7
 2d4:	58 f4       	brcc	.+22     	; 0x2ec <__stack+0x8d>
		data = JoinData_out((1<<linha), red[linha], 255, 255);
 2d6:	e0 91 86 00 	lds	r30, 0x0086
 2da:	90 91 86 00 	lds	r25, 0x0086
 2de:	f0 e0       	ldi	r31, 0x00	; 0
 2e0:	e0 59       	subi	r30, 0x90	; 144
 2e2:	ff 4f       	sbci	r31, 0xFF	; 255
 2e4:	2f ef       	ldi	r18, 0xFF	; 255
 2e6:	4f ef       	ldi	r20, 0xFF	; 255
 2e8:	60 81       	ld	r22, Z
 2ea:	0e c0       	rjmp	.+28     	; 0x308 <__stack+0xa9>
	else if(timer<15)
 2ec:	80 91 87 00 	lds	r24, 0x0087
 2f0:	8f 30       	cpi	r24, 0x0F	; 15
 2f2:	c8 f4       	brcc	.+50     	; 0x326 <__stack+0xc7>
		data = JoinData_out((1<<linha), 255,255, blue[linha]);
 2f4:	e0 91 86 00 	lds	r30, 0x0086
 2f8:	90 91 86 00 	lds	r25, 0x0086
 2fc:	f0 e0       	ldi	r31, 0x00	; 0
 2fe:	e0 5a       	subi	r30, 0xA0	; 160
 300:	ff 4f       	sbci	r31, 0xFF	; 255
 302:	20 81       	ld	r18, Z
 304:	4f ef       	ldi	r20, 0xFF	; 255
 306:	6f ef       	ldi	r22, 0xFF	; 255
 308:	81 e0       	ldi	r24, 0x01	; 1
 30a:	01 c0       	rjmp	.+2      	; 0x30e <__stack+0xaf>
 30c:	88 0f       	add	r24, r24
 30e:	9a 95       	dec	r25
 310:	ea f7       	brpl	.-6      	; 0x30c <__stack+0xad>
 312:	c0 de       	rcall	.-640    	; 0x94 <JoinData_out>
 314:	60 93 bb 00 	sts	0x00BB, r22
 318:	70 93 bc 00 	sts	0x00BC, r23
 31c:	80 93 bd 00 	sts	0x00BD, r24
 320:	90 93 be 00 	sts	0x00BE, r25
 324:	11 c0       	rjmp	.+34     	; 0x348 <__stack+0xe9>
	else if(timer<23)
 326:	80 91 87 00 	lds	r24, 0x0087
 32a:	87 31       	cpi	r24, 0x17	; 23
 32c:	50 f4       	brcc	.+20     	; 0x342 <__stack+0xe3>
		data = JoinData_out((1<<linha), 255, green[linha], 255);
 32e:	e0 91 86 00 	lds	r30, 0x0086
 332:	90 91 86 00 	lds	r25, 0x0086
 336:	f0 e0       	ldi	r31, 0x00	; 0
 338:	e8 59       	subi	r30, 0x98	; 152
 33a:	ff 4f       	sbci	r31, 0xFF	; 255
 33c:	2f ef       	ldi	r18, 0xFF	; 255
 33e:	40 81       	ld	r20, Z
 340:	e2 cf       	rjmp	.-60     	; 0x306 <__stack+0xa7>
	else
		flag_comm=1;
 342:	81 e0       	ldi	r24, 0x01	; 1
 344:	80 93 82 00 	sts	0x0082, r24
	
	if(timer<23)
 348:	80 91 87 00 	lds	r24, 0x0087
 34c:	87 31       	cpi	r24, 0x17	; 23
 34e:	48 f4       	brcc	.+18     	; 0x362 <__stack+0x103>
		shift(data);
 350:	60 91 bb 00 	lds	r22, 0x00BB
 354:	70 91 bc 00 	lds	r23, 0x00BC
 358:	80 91 bd 00 	lds	r24, 0x00BD
 35c:	90 91 be 00 	lds	r25, 0x00BE
 360:	de de       	rcall	.-580    	; 0x11e <shift>

 362:	ff 91       	pop	r31
 364:	ef 91       	pop	r30
 366:	bf 91       	pop	r27
 368:	af 91       	pop	r26
 36a:	9f 91       	pop	r25
 36c:	8f 91       	pop	r24
 36e:	7f 91       	pop	r23
 370:	6f 91       	pop	r22
 372:	5f 91       	pop	r21
 374:	4f 91       	pop	r20
 376:	3f 91       	pop	r19
 378:	2f 91       	pop	r18
 37a:	0f 90       	pop	r0
 37c:	0f be       	out	0x3f, r0	; 63
 37e:	0f 90       	pop	r0
 380:	1f 90       	pop	r1
 382:	18 95       	reti

00000384 <__prologue_saves__>:
 384:	2f 92       	push	r2
 386:	3f 92       	push	r3
 388:	4f 92       	push	r4
 38a:	5f 92       	push	r5
 38c:	6f 92       	push	r6
 38e:	7f 92       	push	r7
 390:	8f 92       	push	r8
 392:	9f 92       	push	r9
 394:	af 92       	push	r10
 396:	bf 92       	push	r11
 398:	cf 92       	push	r12
 39a:	df 92       	push	r13
 39c:	ef 92       	push	r14
 39e:	ff 92       	push	r15
 3a0:	0f 93       	push	r16
 3a2:	1f 93       	push	r17
 3a4:	cf 93       	push	r28
 3a6:	df 93       	push	r29
 3a8:	cd b7       	in	r28, 0x3d	; 61
 3aa:	de b7       	in	r29, 0x3e	; 62
 3ac:	ca 1b       	sub	r28, r26
 3ae:	db 0b       	sbc	r29, r27
 3b0:	0f b6       	in	r0, 0x3f	; 63
 3b2:	f8 94       	cli
 3b4:	de bf       	out	0x3e, r29	; 62
 3b6:	0f be       	out	0x3f, r0	; 63
 3b8:	cd bf       	out	0x3d, r28	; 61
 3ba:	09 94       	ijmp

000003bc <__epilogue_restores__>:
 3bc:	2a 88       	ldd	r2, Y+18	; 0x12
 3be:	39 88       	ldd	r3, Y+17	; 0x11
 3c0:	48 88       	ldd	r4, Y+16	; 0x10
 3c2:	5f 84       	ldd	r5, Y+15	; 0x0f
 3c4:	6e 84       	ldd	r6, Y+14	; 0x0e
 3c6:	7d 84       	ldd	r7, Y+13	; 0x0d
 3c8:	8c 84       	ldd	r8, Y+12	; 0x0c
 3ca:	9b 84       	ldd	r9, Y+11	; 0x0b
 3cc:	aa 84       	ldd	r10, Y+10	; 0x0a
 3ce:	b9 84       	ldd	r11, Y+9	; 0x09
 3d0:	c8 84       	ldd	r12, Y+8	; 0x08
 3d2:	df 80       	ldd	r13, Y+7	; 0x07
 3d4:	ee 80       	ldd	r14, Y+6	; 0x06
 3d6:	fd 80       	ldd	r15, Y+5	; 0x05
 3d8:	0c 81       	ldd	r16, Y+4	; 0x04
 3da:	1b 81       	ldd	r17, Y+3	; 0x03
 3dc:	aa 81       	ldd	r26, Y+2	; 0x02
 3de:	b9 81       	ldd	r27, Y+1	; 0x01
 3e0:	ce 0f       	add	r28, r30
 3e2:	d1 1d       	adc	r29, r1
 3e4:	0f b6       	in	r0, 0x3f	; 63
 3e6:	f8 94       	cli
 3e8:	de bf       	out	0x3e, r29	; 62
 3ea:	0f be       	out	0x3f, r0	; 63
 3ec:	cd bf       	out	0x3d, r28	; 61
 3ee:	ed 01       	movw	r28, r26
 3f0:	08 95       	ret

000003f2 <sprintf>:
 3f2:	ae e0       	ldi	r26, 0x0E	; 14
 3f4:	b0 e0       	ldi	r27, 0x00	; 0
 3f6:	ee ef       	ldi	r30, 0xFE	; 254
 3f8:	f1 e0       	ldi	r31, 0x01	; 1
 3fa:	d2 cf       	rjmp	.-92     	; 0x3a0 <__prologue_saves__+0x1c>
 3fc:	0d 89       	ldd	r16, Y+21	; 0x15
 3fe:	1e 89       	ldd	r17, Y+22	; 0x16
 400:	86 e0       	ldi	r24, 0x06	; 6
 402:	8c 83       	std	Y+4, r24	; 0x04
 404:	1a 83       	std	Y+2, r17	; 0x02
 406:	09 83       	std	Y+1, r16	; 0x01
 408:	8f ef       	ldi	r24, 0xFF	; 255
 40a:	9f e7       	ldi	r25, 0x7F	; 127
 40c:	9e 83       	std	Y+6, r25	; 0x06
 40e:	8d 83       	std	Y+5, r24	; 0x05
 410:	ae 01       	movw	r20, r28
 412:	47 5e       	subi	r20, 0xE7	; 231
 414:	5f 4f       	sbci	r21, 0xFF	; 255
 416:	6f 89       	ldd	r22, Y+23	; 0x17
 418:	78 8d       	ldd	r23, Y+24	; 0x18
 41a:	ce 01       	movw	r24, r28
 41c:	01 96       	adiw	r24, 0x01	; 1
 41e:	08 d0       	rcall	.+16     	; 0x430 <vfprintf>
 420:	ef 81       	ldd	r30, Y+7	; 0x07
 422:	f8 85       	ldd	r31, Y+8	; 0x08
 424:	e0 0f       	add	r30, r16
 426:	f1 1f       	adc	r31, r17
 428:	10 82       	st	Z, r1
 42a:	2e 96       	adiw	r28, 0x0e	; 14
 42c:	e4 e0       	ldi	r30, 0x04	; 4
 42e:	d4 cf       	rjmp	.-88     	; 0x3d8 <__epilogue_restores__+0x1c>

00000430 <vfprintf>:
 430:	ac e0       	ldi	r26, 0x0C	; 12
 432:	b0 e0       	ldi	r27, 0x00	; 0
 434:	ed e1       	ldi	r30, 0x1D	; 29
 436:	f2 e0       	ldi	r31, 0x02	; 2
 438:	a5 cf       	rjmp	.-182    	; 0x384 <__prologue_saves__>
 43a:	7c 01       	movw	r14, r24
 43c:	6b 01       	movw	r12, r22
 43e:	8a 01       	movw	r16, r20
 440:	fc 01       	movw	r30, r24
 442:	17 82       	std	Z+7, r1	; 0x07
 444:	16 82       	std	Z+6, r1	; 0x06
 446:	83 81       	ldd	r24, Z+3	; 0x03
 448:	81 ff       	sbrs	r24, 1
 44a:	b0 c1       	rjmp	.+864    	; 0x7ac <vfprintf+0x37c>
 44c:	ce 01       	movw	r24, r28
 44e:	01 96       	adiw	r24, 0x01	; 1
 450:	4c 01       	movw	r8, r24
 452:	f7 01       	movw	r30, r14
 454:	93 81       	ldd	r25, Z+3	; 0x03
 456:	f6 01       	movw	r30, r12
 458:	93 fd       	sbrc	r25, 3
 45a:	85 91       	lpm	r24, Z+
 45c:	93 ff       	sbrs	r25, 3
 45e:	81 91       	ld	r24, Z+
 460:	6f 01       	movw	r12, r30
 462:	88 23       	and	r24, r24
 464:	09 f4       	brne	.+2      	; 0x468 <vfprintf+0x38>
 466:	9e c1       	rjmp	.+828    	; 0x7a4 <vfprintf+0x374>
 468:	85 32       	cpi	r24, 0x25	; 37
 46a:	39 f4       	brne	.+14     	; 0x47a <vfprintf+0x4a>
 46c:	93 fd       	sbrc	r25, 3
 46e:	85 91       	lpm	r24, Z+
 470:	93 ff       	sbrs	r25, 3
 472:	81 91       	ld	r24, Z+
 474:	6f 01       	movw	r12, r30
 476:	85 32       	cpi	r24, 0x25	; 37
 478:	21 f4       	brne	.+8      	; 0x482 <vfprintf+0x52>
 47a:	b7 01       	movw	r22, r14
 47c:	90 e0       	ldi	r25, 0x00	; 0
 47e:	b1 d1       	rcall	.+866    	; 0x7e2 <fputc>
 480:	e8 cf       	rjmp	.-48     	; 0x452 <vfprintf+0x22>
 482:	51 2c       	mov	r5, r1
 484:	31 2c       	mov	r3, r1
 486:	20 e0       	ldi	r18, 0x00	; 0
 488:	20 32       	cpi	r18, 0x20	; 32
 48a:	a0 f4       	brcc	.+40     	; 0x4b4 <vfprintf+0x84>
 48c:	8b 32       	cpi	r24, 0x2B	; 43
 48e:	69 f0       	breq	.+26     	; 0x4aa <vfprintf+0x7a>
 490:	30 f4       	brcc	.+12     	; 0x49e <vfprintf+0x6e>
 492:	80 32       	cpi	r24, 0x20	; 32
 494:	59 f0       	breq	.+22     	; 0x4ac <vfprintf+0x7c>
 496:	83 32       	cpi	r24, 0x23	; 35
 498:	69 f4       	brne	.+26     	; 0x4b4 <vfprintf+0x84>
 49a:	20 61       	ori	r18, 0x10	; 16
 49c:	2c c0       	rjmp	.+88     	; 0x4f6 <vfprintf+0xc6>
 49e:	8d 32       	cpi	r24, 0x2D	; 45
 4a0:	39 f0       	breq	.+14     	; 0x4b0 <vfprintf+0x80>
 4a2:	80 33       	cpi	r24, 0x30	; 48
 4a4:	39 f4       	brne	.+14     	; 0x4b4 <vfprintf+0x84>
 4a6:	21 60       	ori	r18, 0x01	; 1
 4a8:	26 c0       	rjmp	.+76     	; 0x4f6 <vfprintf+0xc6>
 4aa:	22 60       	ori	r18, 0x02	; 2
 4ac:	24 60       	ori	r18, 0x04	; 4
 4ae:	23 c0       	rjmp	.+70     	; 0x4f6 <vfprintf+0xc6>
 4b0:	28 60       	ori	r18, 0x08	; 8
 4b2:	21 c0       	rjmp	.+66     	; 0x4f6 <vfprintf+0xc6>
 4b4:	27 fd       	sbrc	r18, 7
 4b6:	27 c0       	rjmp	.+78     	; 0x506 <vfprintf+0xd6>
 4b8:	30 ed       	ldi	r19, 0xD0	; 208
 4ba:	38 0f       	add	r19, r24
 4bc:	3a 30       	cpi	r19, 0x0A	; 10
 4be:	78 f4       	brcc	.+30     	; 0x4de <vfprintf+0xae>
 4c0:	26 ff       	sbrs	r18, 6
 4c2:	06 c0       	rjmp	.+12     	; 0x4d0 <vfprintf+0xa0>
 4c4:	85 2d       	mov	r24, r5
 4c6:	6a e0       	ldi	r22, 0x0A	; 10
 4c8:	1e d2       	rcall	.+1084   	; 0x906 <__mulqi3>
 4ca:	58 2e       	mov	r5, r24
 4cc:	53 0e       	add	r5, r19
 4ce:	13 c0       	rjmp	.+38     	; 0x4f6 <vfprintf+0xc6>
 4d0:	83 2d       	mov	r24, r3
 4d2:	6a e0       	ldi	r22, 0x0A	; 10
 4d4:	18 d2       	rcall	.+1072   	; 0x906 <__mulqi3>
 4d6:	38 2e       	mov	r3, r24
 4d8:	33 0e       	add	r3, r19
 4da:	20 62       	ori	r18, 0x20	; 32
 4dc:	0c c0       	rjmp	.+24     	; 0x4f6 <vfprintf+0xc6>
 4de:	8e 32       	cpi	r24, 0x2E	; 46
 4e0:	21 f4       	brne	.+8      	; 0x4ea <vfprintf+0xba>
 4e2:	26 fd       	sbrc	r18, 6
 4e4:	5f c1       	rjmp	.+702    	; 0x7a4 <vfprintf+0x374>
 4e6:	20 64       	ori	r18, 0x40	; 64
 4e8:	06 c0       	rjmp	.+12     	; 0x4f6 <vfprintf+0xc6>
 4ea:	8c 36       	cpi	r24, 0x6C	; 108
 4ec:	11 f4       	brne	.+4      	; 0x4f2 <vfprintf+0xc2>
 4ee:	20 68       	ori	r18, 0x80	; 128
 4f0:	02 c0       	rjmp	.+4      	; 0x4f6 <vfprintf+0xc6>
 4f2:	88 36       	cpi	r24, 0x68	; 104
 4f4:	41 f4       	brne	.+16     	; 0x506 <vfprintf+0xd6>
 4f6:	f6 01       	movw	r30, r12
 4f8:	93 fd       	sbrc	r25, 3
 4fa:	85 91       	lpm	r24, Z+
 4fc:	93 ff       	sbrs	r25, 3
 4fe:	81 91       	ld	r24, Z+
 500:	6f 01       	movw	r12, r30
 502:	81 11       	cpse	r24, r1
 504:	c1 cf       	rjmp	.-126    	; 0x488 <vfprintf+0x58>
 506:	98 2f       	mov	r25, r24
 508:	9f 7d       	andi	r25, 0xDF	; 223
 50a:	95 54       	subi	r25, 0x45	; 69
 50c:	93 30       	cpi	r25, 0x03	; 3
 50e:	28 f4       	brcc	.+10     	; 0x51a <vfprintf+0xea>
 510:	0c 5f       	subi	r16, 0xFC	; 252
 512:	1f 4f       	sbci	r17, 0xFF	; 255
 514:	ff e3       	ldi	r31, 0x3F	; 63
 516:	f9 83       	std	Y+1, r31	; 0x01
 518:	0d c0       	rjmp	.+26     	; 0x534 <vfprintf+0x104>
 51a:	83 36       	cpi	r24, 0x63	; 99
 51c:	31 f0       	breq	.+12     	; 0x52a <vfprintf+0xfa>
 51e:	83 37       	cpi	r24, 0x73	; 115
 520:	71 f0       	breq	.+28     	; 0x53e <vfprintf+0x10e>
 522:	83 35       	cpi	r24, 0x53	; 83
 524:	09 f0       	breq	.+2      	; 0x528 <vfprintf+0xf8>
 526:	57 c0       	rjmp	.+174    	; 0x5d6 <vfprintf+0x1a6>
 528:	21 c0       	rjmp	.+66     	; 0x56c <vfprintf+0x13c>
 52a:	f8 01       	movw	r30, r16
 52c:	80 81       	ld	r24, Z
 52e:	89 83       	std	Y+1, r24	; 0x01
 530:	0e 5f       	subi	r16, 0xFE	; 254
 532:	1f 4f       	sbci	r17, 0xFF	; 255
 534:	44 24       	eor	r4, r4
 536:	43 94       	inc	r4
 538:	51 2c       	mov	r5, r1
 53a:	54 01       	movw	r10, r8
 53c:	14 c0       	rjmp	.+40     	; 0x566 <vfprintf+0x136>
 53e:	38 01       	movw	r6, r16
 540:	f2 e0       	ldi	r31, 0x02	; 2
 542:	6f 0e       	add	r6, r31
 544:	71 1c       	adc	r7, r1
 546:	f8 01       	movw	r30, r16
 548:	a0 80       	ld	r10, Z
 54a:	b1 80       	ldd	r11, Z+1	; 0x01
 54c:	26 ff       	sbrs	r18, 6
 54e:	03 c0       	rjmp	.+6      	; 0x556 <vfprintf+0x126>
 550:	65 2d       	mov	r22, r5
 552:	70 e0       	ldi	r23, 0x00	; 0
 554:	02 c0       	rjmp	.+4      	; 0x55a <vfprintf+0x12a>
 556:	6f ef       	ldi	r22, 0xFF	; 255
 558:	7f ef       	ldi	r23, 0xFF	; 255
 55a:	c5 01       	movw	r24, r10
 55c:	2c 87       	std	Y+12, r18	; 0x0c
 55e:	36 d1       	rcall	.+620    	; 0x7cc <strnlen>
 560:	2c 01       	movw	r4, r24
 562:	83 01       	movw	r16, r6
 564:	2c 85       	ldd	r18, Y+12	; 0x0c
 566:	2f 77       	andi	r18, 0x7F	; 127
 568:	22 2e       	mov	r2, r18
 56a:	16 c0       	rjmp	.+44     	; 0x598 <vfprintf+0x168>
 56c:	38 01       	movw	r6, r16
 56e:	f2 e0       	ldi	r31, 0x02	; 2
 570:	6f 0e       	add	r6, r31
 572:	71 1c       	adc	r7, r1
 574:	f8 01       	movw	r30, r16
 576:	a0 80       	ld	r10, Z
 578:	b1 80       	ldd	r11, Z+1	; 0x01
 57a:	26 ff       	sbrs	r18, 6
 57c:	03 c0       	rjmp	.+6      	; 0x584 <vfprintf+0x154>
 57e:	65 2d       	mov	r22, r5
 580:	70 e0       	ldi	r23, 0x00	; 0
 582:	02 c0       	rjmp	.+4      	; 0x588 <vfprintf+0x158>
 584:	6f ef       	ldi	r22, 0xFF	; 255
 586:	7f ef       	ldi	r23, 0xFF	; 255
 588:	c5 01       	movw	r24, r10
 58a:	2c 87       	std	Y+12, r18	; 0x0c
 58c:	14 d1       	rcall	.+552    	; 0x7b6 <strnlen_P>
 58e:	2c 01       	movw	r4, r24
 590:	2c 85       	ldd	r18, Y+12	; 0x0c
 592:	20 68       	ori	r18, 0x80	; 128
 594:	22 2e       	mov	r2, r18
 596:	83 01       	movw	r16, r6
 598:	23 fc       	sbrc	r2, 3
 59a:	19 c0       	rjmp	.+50     	; 0x5ce <vfprintf+0x19e>
 59c:	83 2d       	mov	r24, r3
 59e:	90 e0       	ldi	r25, 0x00	; 0
 5a0:	48 16       	cp	r4, r24
 5a2:	59 06       	cpc	r5, r25
 5a4:	a0 f4       	brcc	.+40     	; 0x5ce <vfprintf+0x19e>
 5a6:	b7 01       	movw	r22, r14
 5a8:	80 e2       	ldi	r24, 0x20	; 32
 5aa:	90 e0       	ldi	r25, 0x00	; 0
 5ac:	1a d1       	rcall	.+564    	; 0x7e2 <fputc>
 5ae:	3a 94       	dec	r3
 5b0:	f5 cf       	rjmp	.-22     	; 0x59c <vfprintf+0x16c>
 5b2:	f5 01       	movw	r30, r10
 5b4:	27 fc       	sbrc	r2, 7
 5b6:	85 91       	lpm	r24, Z+
 5b8:	27 fe       	sbrs	r2, 7
 5ba:	81 91       	ld	r24, Z+
 5bc:	5f 01       	movw	r10, r30
 5be:	b7 01       	movw	r22, r14
 5c0:	90 e0       	ldi	r25, 0x00	; 0
 5c2:	0f d1       	rcall	.+542    	; 0x7e2 <fputc>
 5c4:	31 10       	cpse	r3, r1
 5c6:	3a 94       	dec	r3
 5c8:	f1 e0       	ldi	r31, 0x01	; 1
 5ca:	4f 1a       	sub	r4, r31
 5cc:	51 08       	sbc	r5, r1
 5ce:	41 14       	cp	r4, r1
 5d0:	51 04       	cpc	r5, r1
 5d2:	79 f7       	brne	.-34     	; 0x5b2 <vfprintf+0x182>
 5d4:	de c0       	rjmp	.+444    	; 0x792 <vfprintf+0x362>
 5d6:	84 36       	cpi	r24, 0x64	; 100
 5d8:	11 f0       	breq	.+4      	; 0x5de <vfprintf+0x1ae>
 5da:	89 36       	cpi	r24, 0x69	; 105
 5dc:	31 f5       	brne	.+76     	; 0x62a <vfprintf+0x1fa>
 5de:	f8 01       	movw	r30, r16
 5e0:	27 ff       	sbrs	r18, 7
 5e2:	07 c0       	rjmp	.+14     	; 0x5f2 <vfprintf+0x1c2>
 5e4:	60 81       	ld	r22, Z
 5e6:	71 81       	ldd	r23, Z+1	; 0x01
 5e8:	82 81       	ldd	r24, Z+2	; 0x02
 5ea:	93 81       	ldd	r25, Z+3	; 0x03
 5ec:	0c 5f       	subi	r16, 0xFC	; 252
 5ee:	1f 4f       	sbci	r17, 0xFF	; 255
 5f0:	08 c0       	rjmp	.+16     	; 0x602 <vfprintf+0x1d2>
 5f2:	60 81       	ld	r22, Z
 5f4:	71 81       	ldd	r23, Z+1	; 0x01
 5f6:	88 27       	eor	r24, r24
 5f8:	77 fd       	sbrc	r23, 7
 5fa:	80 95       	com	r24
 5fc:	98 2f       	mov	r25, r24
 5fe:	0e 5f       	subi	r16, 0xFE	; 254
 600:	1f 4f       	sbci	r17, 0xFF	; 255
 602:	2f 76       	andi	r18, 0x6F	; 111
 604:	b2 2e       	mov	r11, r18
 606:	97 ff       	sbrs	r25, 7
 608:	09 c0       	rjmp	.+18     	; 0x61c <vfprintf+0x1ec>
 60a:	90 95       	com	r25
 60c:	80 95       	com	r24
 60e:	70 95       	com	r23
 610:	61 95       	neg	r22
 612:	7f 4f       	sbci	r23, 0xFF	; 255
 614:	8f 4f       	sbci	r24, 0xFF	; 255
 616:	9f 4f       	sbci	r25, 0xFF	; 255
 618:	20 68       	ori	r18, 0x80	; 128
 61a:	b2 2e       	mov	r11, r18
 61c:	2a e0       	ldi	r18, 0x0A	; 10
 61e:	30 e0       	ldi	r19, 0x00	; 0
 620:	a4 01       	movw	r20, r8
 622:	11 d1       	rcall	.+546    	; 0x846 <__ultoa_invert>
 624:	a8 2e       	mov	r10, r24
 626:	a8 18       	sub	r10, r8
 628:	43 c0       	rjmp	.+134    	; 0x6b0 <vfprintf+0x280>
 62a:	85 37       	cpi	r24, 0x75	; 117
 62c:	29 f4       	brne	.+10     	; 0x638 <vfprintf+0x208>
 62e:	2f 7e       	andi	r18, 0xEF	; 239
 630:	b2 2e       	mov	r11, r18
 632:	2a e0       	ldi	r18, 0x0A	; 10
 634:	30 e0       	ldi	r19, 0x00	; 0
 636:	25 c0       	rjmp	.+74     	; 0x682 <vfprintf+0x252>
 638:	f2 2f       	mov	r31, r18
 63a:	f9 7f       	andi	r31, 0xF9	; 249
 63c:	bf 2e       	mov	r11, r31
 63e:	8f 36       	cpi	r24, 0x6F	; 111
 640:	c1 f0       	breq	.+48     	; 0x672 <vfprintf+0x242>
 642:	18 f4       	brcc	.+6      	; 0x64a <vfprintf+0x21a>
 644:	88 35       	cpi	r24, 0x58	; 88
 646:	79 f0       	breq	.+30     	; 0x666 <vfprintf+0x236>
 648:	ad c0       	rjmp	.+346    	; 0x7a4 <vfprintf+0x374>
 64a:	80 37       	cpi	r24, 0x70	; 112
 64c:	19 f0       	breq	.+6      	; 0x654 <vfprintf+0x224>
 64e:	88 37       	cpi	r24, 0x78	; 120
 650:	21 f0       	breq	.+8      	; 0x65a <vfprintf+0x22a>
 652:	a8 c0       	rjmp	.+336    	; 0x7a4 <vfprintf+0x374>
 654:	2f 2f       	mov	r18, r31
 656:	20 61       	ori	r18, 0x10	; 16
 658:	b2 2e       	mov	r11, r18
 65a:	b4 fe       	sbrs	r11, 4
 65c:	0d c0       	rjmp	.+26     	; 0x678 <vfprintf+0x248>
 65e:	8b 2d       	mov	r24, r11
 660:	84 60       	ori	r24, 0x04	; 4
 662:	b8 2e       	mov	r11, r24
 664:	09 c0       	rjmp	.+18     	; 0x678 <vfprintf+0x248>
 666:	24 ff       	sbrs	r18, 4
 668:	0a c0       	rjmp	.+20     	; 0x67e <vfprintf+0x24e>
 66a:	9f 2f       	mov	r25, r31
 66c:	96 60       	ori	r25, 0x06	; 6
 66e:	b9 2e       	mov	r11, r25
 670:	06 c0       	rjmp	.+12     	; 0x67e <vfprintf+0x24e>
 672:	28 e0       	ldi	r18, 0x08	; 8
 674:	30 e0       	ldi	r19, 0x00	; 0
 676:	05 c0       	rjmp	.+10     	; 0x682 <vfprintf+0x252>
 678:	20 e1       	ldi	r18, 0x10	; 16
 67a:	30 e0       	ldi	r19, 0x00	; 0
 67c:	02 c0       	rjmp	.+4      	; 0x682 <vfprintf+0x252>
 67e:	20 e1       	ldi	r18, 0x10	; 16
 680:	32 e0       	ldi	r19, 0x02	; 2
 682:	f8 01       	movw	r30, r16
 684:	b7 fe       	sbrs	r11, 7
 686:	07 c0       	rjmp	.+14     	; 0x696 <vfprintf+0x266>
 688:	60 81       	ld	r22, Z
 68a:	71 81       	ldd	r23, Z+1	; 0x01
 68c:	82 81       	ldd	r24, Z+2	; 0x02
 68e:	93 81       	ldd	r25, Z+3	; 0x03
 690:	0c 5f       	subi	r16, 0xFC	; 252
 692:	1f 4f       	sbci	r17, 0xFF	; 255
 694:	06 c0       	rjmp	.+12     	; 0x6a2 <vfprintf+0x272>
 696:	60 81       	ld	r22, Z
 698:	71 81       	ldd	r23, Z+1	; 0x01
 69a:	80 e0       	ldi	r24, 0x00	; 0
 69c:	90 e0       	ldi	r25, 0x00	; 0
 69e:	0e 5f       	subi	r16, 0xFE	; 254
 6a0:	1f 4f       	sbci	r17, 0xFF	; 255
 6a2:	a4 01       	movw	r20, r8
 6a4:	d0 d0       	rcall	.+416    	; 0x846 <__ultoa_invert>
 6a6:	a8 2e       	mov	r10, r24
 6a8:	a8 18       	sub	r10, r8
 6aa:	fb 2d       	mov	r31, r11
 6ac:	ff 77       	andi	r31, 0x7F	; 127
 6ae:	bf 2e       	mov	r11, r31
 6b0:	b6 fe       	sbrs	r11, 6
 6b2:	0b c0       	rjmp	.+22     	; 0x6ca <vfprintf+0x29a>
 6b4:	2b 2d       	mov	r18, r11
 6b6:	2e 7f       	andi	r18, 0xFE	; 254
 6b8:	a5 14       	cp	r10, r5
 6ba:	50 f4       	brcc	.+20     	; 0x6d0 <vfprintf+0x2a0>
 6bc:	b4 fe       	sbrs	r11, 4
 6be:	0a c0       	rjmp	.+20     	; 0x6d4 <vfprintf+0x2a4>
 6c0:	b2 fc       	sbrc	r11, 2
 6c2:	08 c0       	rjmp	.+16     	; 0x6d4 <vfprintf+0x2a4>
 6c4:	2b 2d       	mov	r18, r11
 6c6:	2e 7e       	andi	r18, 0xEE	; 238
 6c8:	05 c0       	rjmp	.+10     	; 0x6d4 <vfprintf+0x2a4>
 6ca:	7a 2c       	mov	r7, r10
 6cc:	2b 2d       	mov	r18, r11
 6ce:	03 c0       	rjmp	.+6      	; 0x6d6 <vfprintf+0x2a6>
 6d0:	7a 2c       	mov	r7, r10
 6d2:	01 c0       	rjmp	.+2      	; 0x6d6 <vfprintf+0x2a6>
 6d4:	75 2c       	mov	r7, r5
 6d6:	24 ff       	sbrs	r18, 4
 6d8:	0d c0       	rjmp	.+26     	; 0x6f4 <vfprintf+0x2c4>
 6da:	fe 01       	movw	r30, r28
 6dc:	ea 0d       	add	r30, r10
 6de:	f1 1d       	adc	r31, r1
 6e0:	80 81       	ld	r24, Z
 6e2:	80 33       	cpi	r24, 0x30	; 48
 6e4:	11 f4       	brne	.+4      	; 0x6ea <vfprintf+0x2ba>
 6e6:	29 7e       	andi	r18, 0xE9	; 233
 6e8:	09 c0       	rjmp	.+18     	; 0x6fc <vfprintf+0x2cc>
 6ea:	22 ff       	sbrs	r18, 2
 6ec:	06 c0       	rjmp	.+12     	; 0x6fa <vfprintf+0x2ca>
 6ee:	73 94       	inc	r7
 6f0:	73 94       	inc	r7
 6f2:	04 c0       	rjmp	.+8      	; 0x6fc <vfprintf+0x2cc>
 6f4:	82 2f       	mov	r24, r18
 6f6:	86 78       	andi	r24, 0x86	; 134
 6f8:	09 f0       	breq	.+2      	; 0x6fc <vfprintf+0x2cc>
 6fa:	73 94       	inc	r7
 6fc:	23 fd       	sbrc	r18, 3
 6fe:	12 c0       	rjmp	.+36     	; 0x724 <vfprintf+0x2f4>
 700:	20 ff       	sbrs	r18, 0
 702:	06 c0       	rjmp	.+12     	; 0x710 <vfprintf+0x2e0>
 704:	5a 2c       	mov	r5, r10
 706:	73 14       	cp	r7, r3
 708:	18 f4       	brcc	.+6      	; 0x710 <vfprintf+0x2e0>
 70a:	53 0c       	add	r5, r3
 70c:	57 18       	sub	r5, r7
 70e:	73 2c       	mov	r7, r3
 710:	73 14       	cp	r7, r3
 712:	60 f4       	brcc	.+24     	; 0x72c <vfprintf+0x2fc>
 714:	b7 01       	movw	r22, r14
 716:	80 e2       	ldi	r24, 0x20	; 32
 718:	90 e0       	ldi	r25, 0x00	; 0
 71a:	2c 87       	std	Y+12, r18	; 0x0c
 71c:	62 d0       	rcall	.+196    	; 0x7e2 <fputc>
 71e:	73 94       	inc	r7
 720:	2c 85       	ldd	r18, Y+12	; 0x0c
 722:	f6 cf       	rjmp	.-20     	; 0x710 <vfprintf+0x2e0>
 724:	73 14       	cp	r7, r3
 726:	10 f4       	brcc	.+4      	; 0x72c <vfprintf+0x2fc>
 728:	37 18       	sub	r3, r7
 72a:	01 c0       	rjmp	.+2      	; 0x72e <vfprintf+0x2fe>
 72c:	31 2c       	mov	r3, r1
 72e:	24 ff       	sbrs	r18, 4
 730:	11 c0       	rjmp	.+34     	; 0x754 <vfprintf+0x324>
 732:	b7 01       	movw	r22, r14
 734:	80 e3       	ldi	r24, 0x30	; 48
 736:	90 e0       	ldi	r25, 0x00	; 0
 738:	2c 87       	std	Y+12, r18	; 0x0c
 73a:	53 d0       	rcall	.+166    	; 0x7e2 <fputc>
 73c:	2c 85       	ldd	r18, Y+12	; 0x0c
 73e:	22 ff       	sbrs	r18, 2
 740:	16 c0       	rjmp	.+44     	; 0x76e <vfprintf+0x33e>
 742:	21 ff       	sbrs	r18, 1
 744:	03 c0       	rjmp	.+6      	; 0x74c <vfprintf+0x31c>
 746:	88 e5       	ldi	r24, 0x58	; 88
 748:	90 e0       	ldi	r25, 0x00	; 0
 74a:	02 c0       	rjmp	.+4      	; 0x750 <vfprintf+0x320>
 74c:	88 e7       	ldi	r24, 0x78	; 120
 74e:	90 e0       	ldi	r25, 0x00	; 0
 750:	b7 01       	movw	r22, r14
 752:	0c c0       	rjmp	.+24     	; 0x76c <vfprintf+0x33c>
 754:	82 2f       	mov	r24, r18
 756:	86 78       	andi	r24, 0x86	; 134
 758:	51 f0       	breq	.+20     	; 0x76e <vfprintf+0x33e>
 75a:	21 fd       	sbrc	r18, 1
 75c:	02 c0       	rjmp	.+4      	; 0x762 <vfprintf+0x332>
 75e:	80 e2       	ldi	r24, 0x20	; 32
 760:	01 c0       	rjmp	.+2      	; 0x764 <vfprintf+0x334>
 762:	8b e2       	ldi	r24, 0x2B	; 43
 764:	27 fd       	sbrc	r18, 7
 766:	8d e2       	ldi	r24, 0x2D	; 45
 768:	b7 01       	movw	r22, r14
 76a:	90 e0       	ldi	r25, 0x00	; 0
 76c:	3a d0       	rcall	.+116    	; 0x7e2 <fputc>
 76e:	a5 14       	cp	r10, r5
 770:	30 f4       	brcc	.+12     	; 0x77e <vfprintf+0x34e>
 772:	b7 01       	movw	r22, r14
 774:	80 e3       	ldi	r24, 0x30	; 48
 776:	90 e0       	ldi	r25, 0x00	; 0
 778:	34 d0       	rcall	.+104    	; 0x7e2 <fputc>
 77a:	5a 94       	dec	r5
 77c:	f8 cf       	rjmp	.-16     	; 0x76e <vfprintf+0x33e>
 77e:	aa 94       	dec	r10
 780:	f4 01       	movw	r30, r8
 782:	ea 0d       	add	r30, r10
 784:	f1 1d       	adc	r31, r1
 786:	80 81       	ld	r24, Z
 788:	b7 01       	movw	r22, r14
 78a:	90 e0       	ldi	r25, 0x00	; 0
 78c:	2a d0       	rcall	.+84     	; 0x7e2 <fputc>
 78e:	a1 10       	cpse	r10, r1
 790:	f6 cf       	rjmp	.-20     	; 0x77e <vfprintf+0x34e>
 792:	33 20       	and	r3, r3
 794:	09 f4       	brne	.+2      	; 0x798 <vfprintf+0x368>
 796:	5d ce       	rjmp	.-838    	; 0x452 <vfprintf+0x22>
 798:	b7 01       	movw	r22, r14
 79a:	80 e2       	ldi	r24, 0x20	; 32
 79c:	90 e0       	ldi	r25, 0x00	; 0
 79e:	21 d0       	rcall	.+66     	; 0x7e2 <fputc>
 7a0:	3a 94       	dec	r3
 7a2:	f7 cf       	rjmp	.-18     	; 0x792 <vfprintf+0x362>
 7a4:	f7 01       	movw	r30, r14
 7a6:	86 81       	ldd	r24, Z+6	; 0x06
 7a8:	97 81       	ldd	r25, Z+7	; 0x07
 7aa:	02 c0       	rjmp	.+4      	; 0x7b0 <vfprintf+0x380>
 7ac:	8f ef       	ldi	r24, 0xFF	; 255
 7ae:	9f ef       	ldi	r25, 0xFF	; 255
 7b0:	2c 96       	adiw	r28, 0x0c	; 12
 7b2:	e2 e1       	ldi	r30, 0x12	; 18
 7b4:	03 ce       	rjmp	.-1018   	; 0x3bc <__epilogue_restores__>

000007b6 <strnlen_P>:
 7b6:	fc 01       	movw	r30, r24
 7b8:	05 90       	lpm	r0, Z+
 7ba:	61 50       	subi	r22, 0x01	; 1
 7bc:	70 40       	sbci	r23, 0x00	; 0
 7be:	01 10       	cpse	r0, r1
 7c0:	d8 f7       	brcc	.-10     	; 0x7b8 <strnlen_P+0x2>
 7c2:	80 95       	com	r24
 7c4:	90 95       	com	r25
 7c6:	8e 0f       	add	r24, r30
 7c8:	9f 1f       	adc	r25, r31
 7ca:	08 95       	ret

000007cc <strnlen>:
 7cc:	fc 01       	movw	r30, r24
 7ce:	61 50       	subi	r22, 0x01	; 1
 7d0:	70 40       	sbci	r23, 0x00	; 0
 7d2:	01 90       	ld	r0, Z+
 7d4:	01 10       	cpse	r0, r1
 7d6:	d8 f7       	brcc	.-10     	; 0x7ce <strnlen+0x2>
 7d8:	80 95       	com	r24
 7da:	90 95       	com	r25
 7dc:	8e 0f       	add	r24, r30
 7de:	9f 1f       	adc	r25, r31
 7e0:	08 95       	ret

000007e2 <fputc>:
 7e2:	0f 93       	push	r16
 7e4:	1f 93       	push	r17
 7e6:	cf 93       	push	r28
 7e8:	df 93       	push	r29
 7ea:	18 2f       	mov	r17, r24
 7ec:	09 2f       	mov	r16, r25
 7ee:	eb 01       	movw	r28, r22
 7f0:	8b 81       	ldd	r24, Y+3	; 0x03
 7f2:	81 fd       	sbrc	r24, 1
 7f4:	03 c0       	rjmp	.+6      	; 0x7fc <fputc+0x1a>
 7f6:	8f ef       	ldi	r24, 0xFF	; 255
 7f8:	9f ef       	ldi	r25, 0xFF	; 255
 7fa:	20 c0       	rjmp	.+64     	; 0x83c <fputc+0x5a>
 7fc:	82 ff       	sbrs	r24, 2
 7fe:	10 c0       	rjmp	.+32     	; 0x820 <fputc+0x3e>
 800:	4e 81       	ldd	r20, Y+6	; 0x06
 802:	5f 81       	ldd	r21, Y+7	; 0x07
 804:	2c 81       	ldd	r18, Y+4	; 0x04
 806:	3d 81       	ldd	r19, Y+5	; 0x05
 808:	42 17       	cp	r20, r18
 80a:	53 07       	cpc	r21, r19
 80c:	7c f4       	brge	.+30     	; 0x82c <fputc+0x4a>
 80e:	e8 81       	ld	r30, Y
 810:	f9 81       	ldd	r31, Y+1	; 0x01
 812:	9f 01       	movw	r18, r30
 814:	2f 5f       	subi	r18, 0xFF	; 255
 816:	3f 4f       	sbci	r19, 0xFF	; 255
 818:	39 83       	std	Y+1, r19	; 0x01
 81a:	28 83       	st	Y, r18
 81c:	10 83       	st	Z, r17
 81e:	06 c0       	rjmp	.+12     	; 0x82c <fputc+0x4a>
 820:	e8 85       	ldd	r30, Y+8	; 0x08
 822:	f9 85       	ldd	r31, Y+9	; 0x09
 824:	81 2f       	mov	r24, r17
 826:	09 95       	icall
 828:	89 2b       	or	r24, r25
 82a:	29 f7       	brne	.-54     	; 0x7f6 <fputc+0x14>
 82c:	2e 81       	ldd	r18, Y+6	; 0x06
 82e:	3f 81       	ldd	r19, Y+7	; 0x07
 830:	2f 5f       	subi	r18, 0xFF	; 255
 832:	3f 4f       	sbci	r19, 0xFF	; 255
 834:	3f 83       	std	Y+7, r19	; 0x07
 836:	2e 83       	std	Y+6, r18	; 0x06
 838:	81 2f       	mov	r24, r17
 83a:	90 2f       	mov	r25, r16
 83c:	df 91       	pop	r29
 83e:	cf 91       	pop	r28
 840:	1f 91       	pop	r17
 842:	0f 91       	pop	r16
 844:	08 95       	ret

00000846 <__ultoa_invert>:
 846:	fa 01       	movw	r30, r20
 848:	aa 27       	eor	r26, r26
 84a:	28 30       	cpi	r18, 0x08	; 8
 84c:	61 f1       	breq	.+88     	; 0x8a6 <__ultoa_invert+0x60>
 84e:	20 31       	cpi	r18, 0x10	; 16
 850:	91 f1       	breq	.+100    	; 0x8b6 <__ultoa_invert+0x70>
 852:	e8 94       	clt
 854:	6f 93       	push	r22
 856:	6e 7f       	andi	r22, 0xFE	; 254
 858:	6e 5f       	subi	r22, 0xFE	; 254
 85a:	7f 4f       	sbci	r23, 0xFF	; 255
 85c:	8f 4f       	sbci	r24, 0xFF	; 255
 85e:	9f 4f       	sbci	r25, 0xFF	; 255
 860:	af 4f       	sbci	r26, 0xFF	; 255
 862:	b1 e0       	ldi	r27, 0x01	; 1
 864:	40 d0       	rcall	.+128    	; 0x8e6 <__ultoa_invert+0xa0>
 866:	b4 e0       	ldi	r27, 0x04	; 4
 868:	3e d0       	rcall	.+124    	; 0x8e6 <__ultoa_invert+0xa0>
 86a:	67 0f       	add	r22, r23
 86c:	78 1f       	adc	r23, r24
 86e:	89 1f       	adc	r24, r25
 870:	9a 1f       	adc	r25, r26
 872:	a1 1d       	adc	r26, r1
 874:	68 0f       	add	r22, r24
 876:	79 1f       	adc	r23, r25
 878:	8a 1f       	adc	r24, r26
 87a:	91 1d       	adc	r25, r1
 87c:	a1 1d       	adc	r26, r1
 87e:	6a 0f       	add	r22, r26
 880:	71 1d       	adc	r23, r1
 882:	81 1d       	adc	r24, r1
 884:	91 1d       	adc	r25, r1
 886:	a1 1d       	adc	r26, r1
 888:	22 d0       	rcall	.+68     	; 0x8ce <__ultoa_invert+0x88>
 88a:	09 f4       	brne	.+2      	; 0x88e <__ultoa_invert+0x48>
 88c:	68 94       	set
 88e:	3f 91       	pop	r19
 890:	06 2e       	mov	r0, r22
 892:	00 0c       	add	r0, r0
 894:	30 19       	sub	r19, r0
 896:	00 0c       	add	r0, r0
 898:	00 0c       	add	r0, r0
 89a:	30 19       	sub	r19, r0
 89c:	30 5d       	subi	r19, 0xD0	; 208
 89e:	31 93       	st	Z+, r19
 8a0:	ce f6       	brtc	.-78     	; 0x854 <__ultoa_invert+0xe>
 8a2:	cf 01       	movw	r24, r30
 8a4:	08 95       	ret
 8a6:	46 2f       	mov	r20, r22
 8a8:	47 70       	andi	r20, 0x07	; 7
 8aa:	40 5d       	subi	r20, 0xD0	; 208
 8ac:	41 93       	st	Z+, r20
 8ae:	b3 e0       	ldi	r27, 0x03	; 3
 8b0:	0f d0       	rcall	.+30     	; 0x8d0 <__ultoa_invert+0x8a>
 8b2:	c9 f7       	brne	.-14     	; 0x8a6 <__ultoa_invert+0x60>
 8b4:	f6 cf       	rjmp	.-20     	; 0x8a2 <__ultoa_invert+0x5c>
 8b6:	46 2f       	mov	r20, r22
 8b8:	4f 70       	andi	r20, 0x0F	; 15
 8ba:	40 5d       	subi	r20, 0xD0	; 208
 8bc:	4a 33       	cpi	r20, 0x3A	; 58
 8be:	18 f0       	brcs	.+6      	; 0x8c6 <__ultoa_invert+0x80>
 8c0:	49 5d       	subi	r20, 0xD9	; 217
 8c2:	31 fd       	sbrc	r19, 1
 8c4:	40 52       	subi	r20, 0x20	; 32
 8c6:	41 93       	st	Z+, r20
 8c8:	02 d0       	rcall	.+4      	; 0x8ce <__ultoa_invert+0x88>
 8ca:	a9 f7       	brne	.-22     	; 0x8b6 <__ultoa_invert+0x70>
 8cc:	ea cf       	rjmp	.-44     	; 0x8a2 <__ultoa_invert+0x5c>
 8ce:	b4 e0       	ldi	r27, 0x04	; 4
 8d0:	a6 95       	lsr	r26
 8d2:	97 95       	ror	r25
 8d4:	87 95       	ror	r24
 8d6:	77 95       	ror	r23
 8d8:	67 95       	ror	r22
 8da:	ba 95       	dec	r27
 8dc:	c9 f7       	brne	.-14     	; 0x8d0 <__ultoa_invert+0x8a>
 8de:	00 97       	sbiw	r24, 0x00	; 0
 8e0:	61 05       	cpc	r22, r1
 8e2:	71 05       	cpc	r23, r1
 8e4:	08 95       	ret
 8e6:	9b 01       	movw	r18, r22
 8e8:	ac 01       	movw	r20, r24
 8ea:	0a 2e       	mov	r0, r26
 8ec:	06 94       	lsr	r0
 8ee:	57 95       	ror	r21
 8f0:	47 95       	ror	r20
 8f2:	37 95       	ror	r19
 8f4:	27 95       	ror	r18
 8f6:	ba 95       	dec	r27
 8f8:	c9 f7       	brne	.-14     	; 0x8ec <__ultoa_invert+0xa6>
 8fa:	62 0f       	add	r22, r18
 8fc:	73 1f       	adc	r23, r19
 8fe:	84 1f       	adc	r24, r20
 900:	95 1f       	adc	r25, r21
 902:	a0 1d       	adc	r26, r0
 904:	08 95       	ret

00000906 <__mulqi3>:
 906:	00 24       	eor	r0, r0

00000908 <__mulqi3_loop>:
 908:	80 fd       	sbrc	r24, 0
 90a:	06 0e       	add	r0, r22
 90c:	66 0f       	add	r22, r22
 90e:	11 f0       	breq	.+4      	; 0x914 <__mulqi3_exit>
 910:	86 95       	lsr	r24
 912:	d1 f7       	brne	.-12     	; 0x908 <__mulqi3_loop>

00000914 <__mulqi3_exit>:
 914:	80 2d       	mov	r24, r0
 916:	08 95       	ret

00000918 <_exit>:
 918:	f8 94       	cli

0000091a <__stop_program>:
 91a:	ff cf       	rjmp	.-2      	; 0x91a <__stop_program>
